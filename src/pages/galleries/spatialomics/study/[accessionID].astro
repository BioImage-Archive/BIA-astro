---
import BaseLayoutWithBreadcrumbs from '../../../../layouts/BaseLayoutWithBreadcrumbs.astro';
import StudyTitleInfo from '../../../../components/study-page/StudyTitleInfo.astro'
import StudyContentsSummary from '../../../../components/study-page/StudyContentsSummary.astro'
import DatasetInfo  from "../../../../components/spatialomics/DatasetInfo.astro"
import ViewableImageTable from '../../../../components/ViewableImageTable.astro';
import DatasetFilesTable from '../../../../components/DatasetFilesTable.astro';
import SOTables from '../../../../components/spatialomics/SOTables.astro';
import AnnotationFilesTable from '../../../../components/AnnotationFilesTable.astro';

import spatialomicsCollection from "../../../../data/collections/spatialomics.json"
import studyMetadata from "../../../../data/bia-study-metadata.json"
import {formatListItem, multilineTextRender, formatBytesToHumanSize, getStudyImage, getDatasetStatsByUUID, aggregateDatasetStats, getSimpleAttributeValue} from "../../../../components/SharedJSFunctions.js"

export function getStaticPaths() {
  return spatialomicsCollection.accession_ids.map((id) => {
    return {
      params:  {accessionID: id }
    };
  });
}

const { accessionID } = Astro.params;
const study = studyMetadata[accessionID];

const datasetUUIDsAndFileStats = getDatasetStatsByUUID(study);

let hasTranscripts = false;

const fetchDatasetDetails = async (datasetUuid) => {
    const pageSize = 1000; // Fetch up to 1000 file references to get the attributes
    const apiUrl = `https://wwwdev.ebi.ac.uk/bioimage-archive/api/v2/dataset/${datasetUuid}/file_reference?page_size=${pageSize}`;
    const response = await fetch(apiUrl);
    const fileData = await response.json();
    const attributes = fileData.flatMap(file => file.attribute || []);
    const dataTypeAttr = attributes.find(attr => 
        attr.name === 'attributes_from_biostudies.File' && (
            attr.value?.attributes?.Data_Type === 'transcripts' ||
            attr.value?.attributes?.Data_Type === 'Transcript_Coordinates' ||
            attr.value?.attributes?.Description?.includes('Feature barcode') ||
            attr.value?.attributes?.Description?.includes('feature matrix')
        )
    );
    return dataTypeAttr ? true : false;
};    

const checkForTranscripts = async () => {
    for (const [uuid, fileCount, title] of datasetUUIDsAndFileStats) {
        const dataType = await fetchDatasetDetails(uuid);
        if (dataType) {
            hasTranscripts = true;
            break;
        }
    }
};

await checkForTranscripts();

const tableOfContents = {
  "Study Information": "study",
  "Viewable Images": "viewable_images",
};

if (hasTranscripts) {
  tableOfContents["Transcript files"] = "transcript_files";
}


const images = study.dataset.flatMap(dataset => dataset.image ?? [])

const annotationDatasets = study.dataset.filter(dataset => 
  "annotation_process" in dataset && dataset.annotation_process && dataset.annotation_process.length > 0
);
const annotationDatasetUUIDsAndFileStats = aggregateDatasetStats(annotationDatasets);

if (annotationDatasets.length > 0) {
  tableOfContents["Annotation Datasets"] = "annotation_datasets";
  tableOfContents["Annotation files"] = "annotation_table"
}
const nonannotationDatasets = study.dataset.filter(dataset => 
  !("annotation_process" in dataset && dataset.annotation_process && dataset.annotation_process.length > 0)
);

tableOfContents["Dataset files"] = "file_references";

const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/spatialomics",
]


const omics_links = getSimpleAttributeValue(study, 'see_also_omics')
const code_links = getSimpleAttributeValue(study, 'see_also_code')

---

<BaseLayoutWithBreadcrumbs pageTitle={study.accession_id} breadcrumbs={breadcrumbs}>
  <body>
    <StudyTitleInfo study_info={study} />

    <StudyContentsSummary 
      tableOfContents={tableOfContents} 
      originalStudyLink={`https://www.ebi.ac.uk/biostudies/BioImages/studies/${study.accession_id}`} 
    >
    <div slot="hero-image" style="display: flex; justify-content: space-evenly; flex-wrap: wrap;">
      <figure class="vf-figure" style="max-width:300px;">
        <img
          class="vf-figure__image"
          src={getStudyImage(study)}
        />
      </figure>
    </div>
    </StudyContentsSummary>

    <hr/>

    <section id="study" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Study Information</h2>
      </div>

      <div style="overflow-wrap: anywhere;">
        <!-- <div><b>Description: </b> <Fragment set:html={multilineTextRender(study.description)}></Fragment></div> -->
        <div><b>Licence: </b> {study.licence}<div>
        {
          omics_links && (
            <div><b>Omics links: </b> <ul>{omics_links.map((link) => (<li class="vf-content">{link.description} <a href={link.link}>{link.link}</a></li>))}</ul></div>
          )
        }
        {
          code_links && (
            <div><b>Code links: </b> <ul>{code_links.map((link) => (<li class="vf-content">{link.description} <a href={link.link}>{link.link}</a></li>))}</ul></div>
          )
        }
      </div>
    </section>

    <hr/>

    <section id="study_components" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Imaging Datasets</h2>
      </div>
      <div>
        {
          nonannotationDatasets.map((dataset) => (
            <DatasetInfo dataset={dataset} />
          ))
        }
      </div>
    </section>

    <hr/>
    
    <ViewableImageTable study={study} images={images} imagePageRoot="galleries/spatialomics/image"/>


    {annotationDatasets.length > 0 && (     <hr/>
    <section id="annotation_datasets" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Annotation Datasets</h2>
      </div>
      <div>
        {
          annotationDatasets.map((dataset) => (
            <DatasetInfo dataset={dataset} />
          ))
        }
      </div>
    </section>
    )}

    {annotationDatasets.length > 0 && (
    <hr/>
    <AnnotationFilesTable datasetUUIDsAndFileStats={annotationDatasetUUIDsAndFileStats} title="Annotation" table_id="annotation_table"/>
    )}

    {hasTranscripts && ( <hr/> <SOTables datasetUUIDsAndFileStats={datasetUUIDsAndFileStats}/>)}

    <hr/>
  
    <DatasetFilesTable datasetUUIDsAndFileStats={datasetUUIDsAndFileStats} title="All" table_id="file_references"/>
 
  </body>
</BaseLayout>