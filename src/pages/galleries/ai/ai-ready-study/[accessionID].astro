---
import BaseLayoutWithBreadcrumbs from "../../../../layouts/BaseLayoutWithBreadcrumbs.astro";
import StudyTitleInfo from "../../../../components/study-page/StudyTitleInfo.astro";
import { getTaxons } from "../../../../components/SharedJSFunctions"
import exports from "../../../../data/current-export-mock/bia-ai-study-export.json";
import images from "../../../../data/current-export-mock/bia-ai-image-export.json";
import StudyContentsSummary from "../../../../components/study-page/StudyContentsSummary.astro"
import AIDatasetFilesTable from "../../../../components/ai-gallery/AIDatasetFilesTable.astro";
import { doSwap } from "astro/virtual-modules/transitions-events.js";


export function getStaticPaths() {
  return Object.values(exports).map((dataset) => {
    return {
      params: { accessionID: dataset.accession_id },
    };
  });
}

function getThumbnail(img){
  return img?.additional_metadata?.find(md => md.name === "thumbnail_uri")?.value?.thumbnail_uri?.[0]
                 || img?.additional_metadata?.find(md => md.name === "image_thumbnail_uri")?.value?.image_thumbnail_uri?.[0]
                 || ""
}

const tableOfContents = {
  "Cureated Study Information": "study",
  "Models Related To This Work": "models",
  "Annotated Datasets": "annotated_datasets",
  "Viewable Related Images": "all_images",
  "All Files": "all_files",
};

const { accessionID } = Astro.params;
const study = exports[accessionID];

const datasets = study.dataset.map(ds => ({
  uuid: ds.uuid,
  image: ds.image.map(img => {
    const filePatternMeta = img?.additional_metadata?.find(md => md.name === "file_pattern");
    const filePattern = filePatternMeta?.value?.file_pattern || "";
    const imageRep = images[img.uuid]?.representation.find(r => r.image_format === ".ome.zarr");
    return {
      uuid: img.uuid,
      file_name: filePattern,
      file_uri: imageRep?.file_uri?.[0] || ""
    };
  }),
  dataset_size: ds.file_reference_size_bytes || 0,
  title: ds.title
}));

const organism = getTaxons(study).join(", ");
// Need a better logic to identify source dataset and annotation dataset
const sourceDataset = study.dataset.filter(dataset => dataset.acquisition_process.length > 0 && dataset.annotation_process.length == 0)[0];
const imaging_method = sourceDataset?.acquisition_process?.[0]?.imaging_method_name?.join(", ") || "";

// Need a better logic to identify source dataset and annotation dataset
const annotationDatasets = study.dataset.filter(dataset => dataset.acquisition_process.length == 0 && dataset.annotation_process.length > 0);
const annotationExampleImageURI = annotationDatasets.find(ad => ad.example_image_uri.length > 0)?.example_image_uri[0];
const annotatedImagesMap = new Map();
for (const img of Object.values(images)) {
  if (img.creation_process?.input_image_uuid?.length) {
    const key = img.creation_process.input_image_uuid[0];
    if (!annotatedImagesMap.has(key)) {
      annotatedImagesMap.set(key, []);
    }
    annotatedImagesMap.get(key).push(img);
  }
}
const totalViewableImages = datasets.reduce((count, ds) => count + ds.image.filter(img => !!img.file_uri).length, 0);
const totalFiles = datasets.reduce((count, ds) => count + ds.image.length, 0);
const totalSizeBytes = datasets.reduce((sum, ds) => sum + ds.dataset_size, 0);

function formatBytes(bytes) {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const dm = 2; // decimal places
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
}
const headlineStats = {
  "Total Viewable Images": totalViewableImages.toString(),
  "Total Files": totalFiles.toString(),
  "Total Size of Files": formatBytes(totalSizeBytes)
};
const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/ai",
  "/bioimage-archive/galleries/ai/ai-ready-studies",
]
---

<BaseLayoutWithBreadcrumbs pageTitle={study.accession_id} breadcrumbs={breadcrumbs}>
  <StudyTitleInfo study_info={study} />  
  <StudyContentsSummary tableOfContents={tableOfContents} 
    originalStudyLink={"https://www.ebi.ac.uk/biostudies/BioImages/studies/" + study.accession_id}
    headlineStats={headlineStats}>
      <div style="display: flex; justify-content: space-evenly; flex-wrap: wrap;" slot="hero-image">
          <figure class="vf-figure"  style="width: 48%">
            <img
              class="vf-figure__image"
              src={sourceDataset.example_image_uri}
              alt="Example image for this dataset"
            />
            <figcaption class="vf-figure__caption">
              Example image for this dataset
            </figcaption>
          </figure>

          <figure class="vf-figure" style="width: 48%">
            <img
              class="vf-figure__image"
              src={annotationExampleImageURI}
              alt="Example annotation for this dataset"
            />
            <figcaption class="vf-figure__caption">
              Example annotation for this dataset
            </figcaption>
          </figure>
        </div>
  </StudyContentsSummary>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="study">Curated Study Information</h2>
    </div>
    <div>
      <p><b>Study summary: </b> {study.description}</p>
      <p><b>Licence: </b> CC0</p>
      <p><b>Tags: </b> {study.keyword.join(", ")}</p>
    </div>
    <div></div>
  </section>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="models">Models related to this work</h2>
    </div>
    <div>
      <p><b>Model description: </b> {study?.model_description || "Not available"}</p>
      <p><b>Model link: </b> {study?.model_uri || "Not available"}</p>
    </div>
    <div></div>
  </section>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="annotated_datasets">Annotated Datasets</h2>
    </div>
    <div>
      {annotationDatasets.map((dataset, index) => (
        <div>
          <p><b>{dataset.title}</b></p>
          <div style="padding-left: 1.5rem;">
            <p><b>Organism:</b> <span set:html={organism}/></p>
            <p><b>Imaging method:</b> {imaging_method}</p>
            {dataset.annotation_process.map((annotationProcess, i) => (
              <div>
                <p><b>Annotation type: </b> {annotationProcess?.title}</p>
                <p><b>Annotation method: </b> {annotationProcess?.annotation_method || annotationProcess?.annotation_criteria}</p>
              </div>
            ))}
        </div>
      </div>
    ))}
    </div>
    <div></div>
  </section>
  <hr/>
  <section class="vf-content | embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="all_images">Viewable Annotated Images</h2>
    </div>
    <div>
      <table id="viewable_images" class="display">
        <thead class="vf-table__header">
          <tr>
            <th class="vf-table__heading" scope="col">Image Preview</th>
            <th class="vf-table__heading" scope="col">Annotation Preview</th>
            <th class="vf-table__heading" scope="col">Image UUID</th>
            <th class="vf-table__heading" scope="col">Image Dataset</th>
            <th class="vf-table__heading" scope="col">Annotation UUID</th>
            <th class="vf-table__heading" scope="col">Annotation Dataset</th>
            <th class="vf-table__heading" scope="col">Actions</th>
          </tr>
        </thead>
        <tbody class="vf_table__body">
        {sourceDataset?.image.map((sourceImage) => {
          const annotatedImgs = annotatedImagesMap.get(sourceImage.uuid) || [];
          return (
            <tr>
              <td>
                <a href={`/bioimage-archive/galleries/ai/image/${sourceImage?.uuid}` || "#"}>
                <img src={getThumbnail(sourceImage)} alt="Preview" width="80" /></td>
                </a>
              <td>
                {annotatedImgs.length > 0 ? annotatedImgs.map((annImg) => (
                  <a href={`/bioimage-archive/galleries/ai/image/${annImg?.uuid}` || "#"}>

                    <img
                      src={getThumbnail(annImg)}
                      alt="Annotation Preview"
                      width="80"
                    />
                  </a>
                )) : "Not available"}
              </td>
              <td>{sourceImage.uuid}</td>
              <td>{sourceDataset.title}</td>
              <td>{annotatedImgs.length > 0 ? annotatedImgs.map((annImg) => annImg.uuid).join(", ") : "Not available"}</td>
              <td>{annotationDatasets.map(ds => ds.title).join(", ")}</td>
              <td>
                <a href={`/bioimage-archive/galleries/ai/image/${sourceImage.uuid}`}>View</a>
              </td>
            </tr>
          );
        })}
      </tbody>
      </table>
    </div>
  </section>
  <hr/>
  <AIDatasetFilesTable datasets={datasets}/>
<script type="application/json" id="files-data" set:html={JSON.stringify({ datasets })} />
<script>
    document.addEventListener("DOMContentLoaded", function () {
      $("#viewable_images").DataTable({
        scrollX: true,
        columnDefs: [{ type: "natural", targets: 0 }],
      });
    });
</script>
</BaseLayoutWithBreadcrumbs>
