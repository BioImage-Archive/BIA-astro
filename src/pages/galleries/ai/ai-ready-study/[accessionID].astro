---
import BaseLayoutWithBreadcrumbs from "../../../../layouts/BaseLayoutWithBreadcrumbs.astro";
import StudyTitleInfo from "../../../../components/study-page/StudyTitleInfo.astro";
import { getTaxons } from "../../../../components/SharedJSFunctions"
//import exports from "../../../../data/old-export-format/bia-ai-export.json";
import exports from "../../../../data/current-export-mock/bia-ai-study-export.json";
import images from "../../../../data/current-export-mock/bia-ai-image-export.json";
import studyImage from "../../../../assets/bioimage-archive/study.png";
import biosampleImage from "../../../../assets/bioimage-archive/biosample.png";
import imacqImage from "../../../../assets/bioimage-archive/im_acquisition.png";
import specimenImage from "../../../../assets/bioimage-archive/specimen.png";
import annotationsImage from "../../../../assets/bioimage-archive/annotations.png";
import { addIssueToContext } from "astro:schema";

export function getStaticPaths() {
  return Object.values(exports).map((dataset) => {
    return {
      params: { accessionID: dataset.accession_id },
    };
  });
}

const tableOfContents = {
  "Study Information": "study",
  "Viewable Images": "viewable_images",
  "Viewable Annotations": "viewable_annotations",
  "All Images": "all_images",
  "All Annotations": "annotations",
};

const { accessionID } = Astro.params;
const study = exports[accessionID];
const organism = getTaxons(study).join(", ");
// Need a better logic to identify source dataset and annotation dataset
const sourceDataset = study.dataset.filter(ds => ds.acquisition_process.length > 0 && ds.annotation_process.length == 0)[0];
const imaging_method = sourceDataset?.acquisition_process?.[0]?.imaging_method_name?.join(", ") || "";
const sourceImages = study.dataset.filter(ds => ds.acquisition_process.length > 0 && ds.annotation_process.length == 0)[0];
const sourceImageUUIDs = Object.entries(sourceImages.image).map(([i, img]) => img["uuid"]);

// Need a better logic to identify source dataset and annotation dataset
const annotationDatasets = study.dataset.filter(ds => ds.acquisition_process.length == 0 && ds.annotation_process.length > 0);

const annotationExampleImageURI = annotationDatasets.find(ad => ad.example_image_uri.length > 0)?.example_image_uri[0];

const annotationImages = study.dataset.filter(ds => ds.acquisition_process.length == 0 && ds.annotation_process.length > 0)[0];
const annotationImageUUIDs = Object.entries(annotationImages.image).map(([i, img]) => img["uuid"]);


//const viewableNonAnnotationImages = study?.image_uuids
//  .filter((item) => !Object.values(study.annotation_images).includes(item))
//  .map((uuid) => exports["images"][uuid]);

//const viewable_annotation_images = study?.image_uuids
//  .filter((item) => Object.values(study.annotation_images).includes(item))
//  .map((uuid) => exports["images"][uuid]);


const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/ai",
  "/bioimage-archive/galleries/ai/ai-ready-studies",
]

---

<BaseLayoutWithBreadcrumbs pageTitle={study.accession_id} breadcrumbs={breadcrumbs}>
  <body>
    <StudyTitleInfo study_info={study} />
      <section class="embl-grid embl-grid--has-centered-content">
        <div></div>
        <a href={"https://www.ebi.ac.uk/biostudies/BioImages/studies/" + study.accession_id}>
        <button class="vf-button vf-button--primary vf-button--sm"
          >Original submission page</button
        >
        </a>
        <div></div>
      </section>
      <section class="vf-content | vf-sidebar vf-sidebar--start">
        <div class="vf-sidebar__inner">
          <div>
            <h2 class="vf-section-header__heading">On this page</h2>
            <ul class="vf-list">
              {
                Object.entries(tableOfContents).map(([text_title, id]) => (
                  <li class="vf-list__item">
                    <a class="vf-list__link" href={"#" + id}>
                      {text_title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
          
          <div style="display: flex; justify-content: space-evenly; flex-wrap: wrap;">
          
            <figure class="vf-figure">
              <img
                class="vf-figure__image"
                src={sourceDataset.example_image_uri}
                alt="Example image for this dataset"
              />
              <figcaption class="vf-figure__caption">
                Example image for this dataset
              </figcaption>
            </figure>

            <figure class="vf-figure">
              <img
                class="vf-figure__image"
                src={annotationExampleImageURI}
                alt="Example annotation for this dataset"
              />
              <figcaption class="vf-figure__caption">
                Example annotation for this dataset
              </figcaption>
            </figure>
          </div>
        </div>
      </section>
  </body> 
  <section class="vf-content">
    <div class="vf-grid vf-grid__col-4">
      <div>Images<br /> {study.n_images}</div>
      <div>Annotations <br /> Not yet calculated</div>
      <div>Study Size <br /> Not yet calculated</div>
      <div>File Types <br /> Not yet calculated</div>
    </div>
  </section>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="study">Curated Study Information</h2>
    </div>
    <div>
      <p><b>Study summary: </b> {study.description}</p>
      <p><b>Licence: </b> CC0</p>
      <p><b>Tags: </b> {study.keyword.join(", ")}</p>
    </div>
    <div></div>
  </section>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h3>Models related to this work</h3>
    </div>
    <div>
      <p><b>Model description: </b> {study?.model_description || "Not available"}</p>
      <p><b>Model link: </b> {study?.model_uri || "Not available"}</p>
    </div>
    <div></div>
  </section>
  <hr/>
  <section class="embl-grid embl-grid--has-centered-content">
    <div>
      <h3>Annotated Datasets</h3>
    </div>
    <div>
      {annotationDatasets.map((dataset, index) => (
        <div>
          <p><b>{dataset.title}</b></p>
          <div style="padding-left: 1.5rem;">
            <p><b>Organism:</b> <span set:html={organism}/></p>
            <p><b>Imaging method:</b> {imaging_method}</p>
            {dataset.annotation_process.map((ap, i) => (
              <div>
                <p><b>Annotation type: </b> {ap?.title}</p>
                <p><b>Annotation method: </b> {ap?.annotation_method || ap?.annotation_criteria}</p>
              </div>
            ))}
        </div>
      </div>
    ))}

    </div>
    <div></div>
  </section>
  <hr/>

  <section class="vf-content | embl-grid embl-grid--has-centered-content">
    <div>
      <h3 class="vf-section-header__heading">Viewable Annotated Images</h3>
    </div>
    <div>
      <table id="viewable_images" class="display">
        <thead class="vf-table__header">
          <tr>
            <th class="vf-table__heading" scope="col">Image Preview</th>
            <th class="vf-table__heading" scope="col">Annotation Preview</th>
            <th class="vf-table__heading">Image UUID</th>
            <th class="vf-table__heading">Image Dataset</th>
            <th class="vf-table__heading">Annotation UUID</th>
            <th class="vf-table__heading">Annotation Dataset</th>
            <th class="vf-table__heading">Actions</th>
          </tr>
        </thead>
        <tbody class="vf_table__body">
          {sourceDataset.image.map((sourceImage, i) => {
                  const sourceImageUUID = sourceImage.uuid
                  let annotatedImages = [];
                  annotatedImages = Object.values(images).filter(img =>img.creation_process?.input_image_uuid?.[0] === sourceImageUUID);
                  return (<tr>
                            <td><img src={sourceImage?.additional_metadata?.find(md => md.name === "thumbnail_uri")?.value?.thumbnail_uri?.[0]} alt="Preview" width="80" /></td>
                            <td>
                              {annotatedImages.length > 0 ? (
                                annotatedImages.map(({ annImg }) => (
                                  <img
                                    src={annImg?.additional_metadata?.find(md => md.name === "thumbnail_uri")?.value?.thumbnail_uri?.[0]}
                                    alt="Annotation Preview"
                                    width="80"
                                  />
                                ))
                              ) : (
                                "Not available"
                              )}
                              
                            </td>
                            <td>{sourceImageUUID}</td>
                            <td>{sourceDataset.title}</td>
                            <td>{annotatedImages.length > 0 ? annotatedImages.map((annImg) => annImg.uuid).join(", ") : "Not available"}</td>
                            <td>{annotationDatasets.map(ds => ds.title).join(", ")}</td>
                            <td>
                              <a href={"/bioimage-archive/galleries/ai/image/" + sourceImageUUID}>View</a>
                            </td>
                          </tr>
                  
                   );
                })
          }
          
          
            
        </tbody>
      </table>
    </div>
  </section>
<script>
    document.addEventListener("DOMContentLoaded", function () {
      $("#viewable_images").DataTable({
        scrollX: true,
        columnDefs: [{ type: "natural", targets: 0 }],
      });
      $("#viewable_annotations").DataTable({
        scrollX: true,
        columnDefs: [{ type: "natural", targets: 0 }],
      });
    });
  </script>
</BaseLayoutWithBreadcrumbs>


