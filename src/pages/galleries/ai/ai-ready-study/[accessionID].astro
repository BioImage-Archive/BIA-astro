---
import BaseLayoutWithBreadcrumbs from "../../../../layouts/BaseLayoutWithBreadcrumbs.astro";
import StudyTitleInfo from "../../../../components/study-page/StudyTitleInfo.astro";
import { getThumbnail, getTaxons, getSimpleAttributeValue, getDatasetStatsByUUID, formatBytesToHumanSize, getAnnotationType, getStudyFromAPI, generateSourceAnnotatedImageMap } from "../../../../components/SharedJSFunctions"
import { type Study } from "../../../../components/SharedInterface.astro"
import collection from '../../../../data/collections/ai-ready-datasets.json';
import StudyContentsSummary from "../../../../components/study-page/StudyContentsSummary.astro"
import DatasetFilesTable from "../../../../components/DatasetFilesTable.astro";
import StudyComponents from "../../../../components/ai-gallery/StudyComponents.astro";
import "../../../../styles/image_slider.css"

export function getStaticPaths() {
  return Object.values(collection.accession_ids).map(accession => ({params: { accessionID: accession }}));
}

const { accessionID } = Astro.params;

const study = await getStudyFromAPI("accession", accessionID) as Study;
const datasetUUIDsAndFileStats = getDatasetStatsByUUID(study)
const annotatedImagesMap = await generateSourceAnnotatedImageMap(study);
const organism = getTaxons(study).join(", ");
// Need a better logic to identify source dataset and annotation dataset
const sourceDataset = study.dataset.filter(ds => ds.acquisition_process.length > 0 && ds.annotation_process.length == 0);
const allSourceImages = sourceDataset.flatMap(ds => ds.image || []);
const imaging_method = Array.from(
  new Set(sourceDataset.flatMap(ds => ds?.acquisition_process?.[0]?.imaging_method_name || []))
).join(', ');
const sourceExampleImageURI = sourceDataset.flatMap(ds => ds?.example_image_uri || []).filter(Boolean)[0];
// Need a better logic to identify source dataset and annotation dataset
const annotationDatasets = study.dataset.filter(ds => ds.acquisition_process.length == 0 && ds.annotation_process.length > 0);
const annotationExampleImageURI = annotationDatasets.find(ad => ad.example_image_uri.length > 0)?.example_image_uri[0];

const headlineStats = {
  "Total Viewable Images":  study.dataset.reduce((accumulator, dataset) => accumulator + dataset.image_count, 0),
  "Total files": study.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_reference_count, 0),
  "Total size of files": formatBytesToHumanSize(study.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_reference_size_bytes, 0)),
};
const studyContent = {
  "Study summary": getSimpleAttributeValue(study, "one_summary") || study.description,
  "License": "CC0",
  "Tags": getSimpleAttributeValue(study, "ai_tags")[0].join(", ") || study.keyword.join(", ")
}
const modelInformation = getSimpleAttributeValue(study, "associated_ai_models")?.[0] || undefined;
const modelContent = {
  "Model description": modelInformation?.description,
  "Model link": modelInformation?.link
}
const annotatedDatasetContent = annotationDatasets.map((dataset, index) => ({
  dataset_title: dataset.title,
  organism: organism,
  imaging: imaging_method,
  annotation_type: getAnnotationType([dataset]).join(", ") || "No information available",
  annotation_method: dataset.annotation_process[0]?.protocol_description || dataset.annotation_process[0]?.annotation_criteria || "No information available"
}))
const tableOfContents = {
  "Curated Study Information": "study",
  ...(modelInformation && { "Models Related To This Work": "models" }),
  "Annotated Datasets": "annotated_datasets",
  "Viewable Annotated Images": "all_images",
  "All Files": "all_files",
};
const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/ai",
  "/bioimage-archive/galleries/ai/ai-ready-studies",
]

---
<BaseLayoutWithBreadcrumbs pageTitle={study.accession_id} breadcrumbs={breadcrumbs}>
  <StudyTitleInfo study_info={study} />  
  <StudyContentsSummary tableOfContents={tableOfContents} 
    originalStudyLink={"https://www.ebi.ac.uk/biostudies/BioImages/studies/" + study.accession_id}
    headlineStats={headlineStats}>
      <div style="display: flex; justify-content: space-evenly; flex-wrap: wrap;" slot="hero-image">
          <figure class="vf-figure"  style="width: 48%">
            <img
              class="vf-figure__image"
              src={sourceExampleImageURI}
              alt="Example image for this dataset"
            />
            <figcaption class="vf-figure__caption">
              Example image for this dataset
            </figcaption>
          </figure>

          <figure class="vf-figure" style="width: 48%">
            <img
              class="vf-figure__image"
              src={annotationExampleImageURI}
              alt="Example annotation for this dataset"
            />
            <figcaption class="vf-figure__caption">
              Example annotation for this dataset
            </figcaption>
          </figure>
        </div>
  </StudyContentsSummary>
  <hr/>
  <StudyComponents title="Curated Study Information", id="study" content={studyContent} />
  {modelInformation === undefined ? <br /> :  <StudyComponents title="Models Related To This Work" id="models" content={modelContent} />}
  <StudyComponents title="Annotated Datasets" id ="annotated_datasets" content={annotatedDatasetContent}/>
  <section class="vf-content | embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading" id="all_images">Viewable Annotated Images</h2>
    </div>
    <div class="vf-grid__col--span-2">
      <table id="viewable_images" class="display vf-table">
        <thead class="vf-table__header">
          <tr>
            <th class="vf-table__heading" scope="col">Image Preview</th>
            <th class="vf-table__heading" scope="col">Annotation Preview</th>
            <th class="vf-table__heading" scope="col">Image UUID</th>
            <th class="vf-table__heading" scope="col">Image Dataset</th>
            <th class="vf-table__heading" scope="col">Annotation UUID</th>
            <th class="vf-table__heading" scope="col">Annotation Dataset</th>
            <th class="vf-table__heading" scope="col">Actions</th>
          </tr>
        </thead>
        <tbody class="vf_table__body">
        {allSourceImages.filter(img=> annotatedImagesMap.has(img.uuid)).map((sourceImage, rowIndex) => {
          const annotatedImgs = annotatedImagesMap.get(sourceImage.uuid) || [];
          return (
            <tr>
              <td>
                <a href={`/bioimage-archive/galleries/ai/image/${sourceImage?.uuid}` || "#"}>
                <img src={getThumbnail(sourceImage)} alt="Preview" width="80" /></td>
                </a>
              <td>
                <div class="slideshow-container" data-row={rowIndex}>
                {annotatedImgs.length > 1 ? annotatedImgs.map((annImg, i) => (
                  <div class="slides fade" style={`display: ${i === 0 ? "block" : "none"}`}>
                  <a href={`/bioimage-archive/galleries/ai/image/${sourceImage?.uuid}` || "#"}><img src={getThumbnail(annImg)} alt="Annotation Preview" width="80"/></a>
                  </div>
                )) : annotatedImgs.map((annImg) => (<a href={`/bioimage-archive/galleries/ai/image/${sourceImage?.uuid}` || "#"}><img src={getThumbnail(annImg)} alt="Annotation Preview" width="80"/></a>))
                }
                </div>
              </td>
              <td>{sourceImage.uuid}</td>
              <td>{sourceDataset.find(dataset => dataset.image.some(image => image.uuid === sourceImage.uuid))?.title || ""}</td>
              <td>
                <div class="uuid-container">
                  {annotatedImgs.map((annImg, i) => (
                    <span class="uuid" style={`display: ${i === 0 ? "inline" : "none"}`}>{annImg.uuid}</span>
                  ))}
                </div>
              </td>
              <td>
                <div class="dataset-title-container">
                  {annotatedImgs.map((annImg, i) => {
                    const dataset = study.dataset.find(ds =>
                      ds.image?.some(image => image.uuid === annImg.uuid)
                    );
                    return (
                      <span class="dataset-title" style={`display: ${i === 0 ? "inline" : "none"}`}>
                        {dataset?.title || "P"}
                      </span>
                    );
                  })}
                </div>
              </td>
              <td>
                <a href={`/bioimage-archive/galleries/ai/image/${sourceImage.uuid}`}>View</a>
              </td>
            </tr>
          );
        })}
      </tbody>
      </table>
    </div>
  </section>
  <hr/>
  <DatasetFilesTable datasetUUIDsAndFileStats={datasetUUIDsAndFileStats} page="gallery"/>
  <script type="module">
  document.addEventListener("DOMContentLoaded", function () {
    $("#viewable_images").DataTable({
      scrollX: true,
      columnDefs: [{ type: "natural", targets: 0 }],
    });
    document.querySelectorAll("tr").forEach((row) => {
      const slides = row.querySelectorAll(".slides");
      const uuids = row.querySelectorAll(".uuid");
      const titles = row.querySelectorAll(".dataset-title");

      if (slides.length <= 1 || uuids.length <= 1) return;

      let index = 0;

      setInterval(() => {
        slides.forEach((s) => (s.style.display = "none"));
        uuids.forEach((u) => (u.style.display = "none"));
        titles.forEach((t) => (t.style.display = "none"));
        slides[index].style.display = "block";
        uuids[index].style.display = "inline";
        titles[index].style.display = "inline";
        index = (index + 1) % slides.length;
      }, 3500);
    });
  });
</script>
</BaseLayoutWithBreadcrumbs>
