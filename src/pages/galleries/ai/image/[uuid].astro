---
import BaseLayoutWithBreadcrumbs from '../../../../layouts/BaseLayoutWithBreadcrumbs.astro';
import WebsiteStateButton from '../../../../components/WebsiteStateButton.astro';
import { taxonRender } from "../../../../components/SharedJSFunctions.js";
import SourceAnnotatedImage from '../../../../components/ai-gallery/SourceAnnotatedImage.astro';
import ImageMetadata from '../../../../components/ai-gallery/ImageMetadata.astro';
import exports from "../../../../data/current-export-mock/bia-ai-image-export.json";
import datasets from "../../../../data/current-export-mock/bia-ai-dataset-export.json";
import studyData from "../../../../data/old-export-format/bia-export.json";
import AIStudyData from "../../../../data/current-export-mock/bia-ai-study-export.json";
import SpatialomicsStudyData from "../../../../data/old-export-format/bia-spatialomics-export.json";
import "../../../../styles/image_slider.css"
export function getStaticPaths() {
  return Object.keys(exports).map((uuid) => {
    return {
      params:  { uuid: uuid }
    };
  });
}

function getAttributes(image) {
  return image?.additional_metadata.find(meta =>
    meta.name.startsWith("attributes_from_file_reference")
  )?.value?.attributes || {};
}



function getStudyData(datasetID) {
  const accessionID = datasets[datasetID].submitted_in_study.accession_id;
  return (
  studyData.datasets?.[accessionID] ??
  AIStudyData?.[accessionID] ??
  SpatialomicsStudyData.datasets?.[accessionID] ??
  { title: "Unknown Study", dataset: [] }
);

}

function getTaxons(study) {
    const taxonHtmlList = []
    const taxonList = []
    for (var dataset of study.dataset) {
        for (var biosample of dataset.biological_entity) {
            for (var taxon of biosample.organism_classification) {
                if (!taxonList.some(txnFinal => txnFinal.common_name === taxon.common_name || txnFinal.scientific_name === taxon.scientific_name )) {
                    taxonList.push(taxon)
                    taxonHtmlList.push(taxonRender(taxon))
                }
            }
        }
    }
    return taxonHtmlList
}

const { uuid } = Astro.params;
const image = exports[uuid];
let sourceImage;
let annotatedImages = [];

if (image.creation_process?.input_image_uuid?.[0]) {
  sourceImage = exports[image.creation_process.input_image_uuid[0]];
  annotatedImages = Object.values(exports).filter(img =>
    img.creation_process?.input_image_uuid?.[0] === sourceImage.uuid
  );
} else {
  sourceImage = image;
  annotatedImages = Object.values(exports).filter(img =>
    img.creation_process?.input_image_uuid?.[0] === uuid
  );
}
let annotatedImage = annotatedImages[0];

const studyInfo = getStudyData(sourceImage.submission_dataset_uuid);
const organism = getTaxons(studyInfo).join(", ");
const vizarrURL = "https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source="
const sourceImageAtrributes = getAttributes(sourceImage)
const sourceImageRep = sourceImage.representation.find((r) => r.image_format === ".ome.zarr");

const sourceImgS3Url = sourceImageRep.file_uri[0].replace(vizarrURL,'') || "";
const sourceDataset = studyInfo.dataset.find((d) => d['uuid'] === sourceImage.submission_dataset_uuid);
const imagingMethod = sourceDataset?.acquisition_process?.[0]?.imaging_method_name?.join(", ") || "";

const annotatedImageAttributes = getAttributes(annotatedImage);
const annotatedImageRep = annotatedImage?.representation.find((r) => r.image_format === ".ome.zarr");
const annotatedImgS3Url = annotatedImageRep?.file_uri?.[0].replace(vizarrURL,'') || "";
const annotatedDataset = studyInfo.dataset.find((d) => d['uuid'] === annotatedImage?.submission_dataset_uuid);
const annotationTypeMethod = annotatedDataset?.annotation_process[0] ?? {title: "", annotation_criteria:""};

const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/ai",
  "/bioimage-archive/galleries/ai/ai-ready-studies",
  `/bioimage-archive/galleries/ai/ai-ready-study/${studyInfo.accession_id}`,
]
---
<BaseLayoutWithBreadcrumbs pageTitle={uuid} breadcrumbs={breadcrumbs}>
    <div class="vf-stack vf-stack--500">
        <section class="vf-content | embl-grid--has-centered-content">
        <div style="padding-left: 10%;padding-right: 10%">
        <h1 class="vf-intro__heading vf-intro__heading--has-tag">{ studyInfo.accession_id }
                    <WebsiteStateButton/>
                </h1>
                <h2 class="vf-intro__subheading">{studyInfo.title}</h2>
              <br />
            <a href={`/bioimage-archive/galleries/ai/ai-ready-study/${studyInfo.accession_id}`}>
                    <button class="vf-button vf-button--primary vf-button--sm">Study Page</button>
                </a>
        </div>
        </section>
        <section class="vf-content "><a href={"/bioimage-archive/help/downloading-data#aws_client_download"}>How to download these images</a><br/></section>    
        <SourceAnnotatedImage annotatedImages={annotatedImages} sourceImgS3Url={sourceImgS3Url} vizarrURL={vizarrURL}/>
        <section class="vf-content">
            <div style="display: flex; justify-content: space-between; gap: 2rem;">
              <ImageMetadata text="Source Image" url={sourceImgS3Url} imageRep={sourceImageRep} imageAtrributes={sourceImageAtrributes} btnID="CopyURLButton"/>
            {annotatedImages.length > 0 && (
              <ImageMetadata text="Annotation" url={annotatedImgS3Url} imageRep={annotatedImageRep} imageAtrributes={annotatedImageAttributes} btnID="CopyAnnotationButton"/>
            )}
            </div>
        </section>
        <hr />
        <section class="vf-content | embl-grid embl-grid--has-centered-content">
        <div><h3>Annotated Dataset</h3></div>
        <div>
            <h4>{datasets[sourceImage.submission_dataset_uuid].title}</h4>
            <b>License: </b><a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a><br />
            <b>Organism: </b> <span set:html={organism}/><br />
            <b>Imaging method: </b> {imagingMethod}<br />
            <b>Annotation type: </b><span id="annotation-type">{annotationTypeMethod.title}</span> <br />
            <b>Annotation method: </b><span id="annotation-method">{annotationTypeMethod?.annotation_method || annotationTypeMethod?.annotation_criteria}</span> <br />
        </div>
        </section>
        <script type="application/json" id="images-json" set:html={JSON.stringify(annotatedImages)} />
        <script type="application/json" id="images-length" set:html={JSON.stringify(annotatedImages.length)} />
        <script type="application/json" id="study-json" set:html={JSON.stringify(studyInfo.dataset)} />
</BaseLayout>
