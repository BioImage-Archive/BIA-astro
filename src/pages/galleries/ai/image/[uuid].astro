---
import BaseLayoutWithBreadcrumbs from '../../../../layouts/BaseLayoutWithBreadcrumbs.astro';
import WebsiteStateButton from '../../../../components/WebsiteStateButton.astro';
import { getMetadataValue, getImage, getStudyUUIDFromImage, getStudiesforAIGallery, getTaxons, getImagesForAIGallery} from "../../../../components/SharedJSFunctions.js";
import SourceAnnotatedImage from '../../../../components/ai-gallery/SourceAnnotatedImage.astro';
import collection from '../../../../data/collections/ai-ready-datasets.json';
import StudyComponents from "../../../../components/ai-gallery/StudyComponents.astro";
import "../../../../styles/image_slider.css"


const { uuid } = Astro.params;
const image = await getImage(uuid);
const studyUUID = await getStudyUUIDFromImage(image);
const studyInfo = Object.values(await getStudiesforAIGallery([studyUUID], "uuid", "ai-image"))[0];//getStudyData(sourceImage.submission_dataset_uuid);
const images = await getImagesForAIGallery(studyInfo.dataset);

export async function getStaticPaths() {
  const allStudies = await getStudiesforAIGallery(collection.accession_ids, "accession", "ai-image-static"); // replace [] with list of known UUIDs if available

  // Step 2: Extract all datasets from studies
  const allDatasets = Object.values(allStudies)
    .map(study => study.dataset)
    .flat();
  // Step 3: Get all images from datasets
  const images = allDatasets.map(dataset => dataset.image).flat()
  return Object.values(images).map((img) => {
    return {
      params:  { uuid: img.uuid }
    };
  });
}


let sourceImage;
let annotatedImages = [];

if (image.creation_process?.input_image_uuid?.[0]) {
  sourceImage = images[image.creation_process.input_image_uuid[0]];
  annotatedImages = Object.values(images).filter(img =>
    img.creation_process?.input_image_uuid?.[0] === sourceImage.uuid &&
    img.representation.some(imgRep => imgRep.image_format === ".ome.zarr") && 
    !img.additional_metadata?.some(md =>
      md.value?.attributes?.["file description"] === "Raw image in JPEG format"
    )
  );
} else {
  sourceImage = image;
  annotatedImages = Object.values(images).filter(img =>
    img.creation_process?.input_image_uuid?.[0] === uuid &&
    img.representation.some(imgRep => imgRep.image_format === ".ome.zarr") &&
    !img.additional_metadata?.some(md =>
      md.value?.attributes?.["file description"] === "Raw image in JPEG format"
    )
  );
}

const organism = getTaxons(studyInfo).join(", ");
const vizarrURL = "https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source="
const sourceDataset = studyInfo.dataset.find((d) => d['uuid'] === sourceImage.submission_dataset_uuid);
const imagingMethod = sourceDataset?.acquisition_process?.[0]?.imaging_method_name?.join(", ") || "";
const annotationDatasets = studyInfo.dataset.filter(dataset => dataset.acquisition_process.length == 0 && dataset.annotation_process.length > 0);
const annotatedDatasetContent = annotationDatasets.map((dataset, index) => ({
  dataset_title: dataset.title,
  organism: organism,
  imaging: imagingMethod,
annotation_type: getMetadataValue(dataset.additional_metadata, "annotation_type", "annotation_type")?.join(", ") || dataset.annotation_process[0].method_type[0] || "No information avaialable",
  annotation_method: dataset.annotation_process[0]?.protocol_description || dataset.annotation_process[0]?.annotation_criteria || "No information avaialable"
}))
const license = {link: "https://creativecommons.org/publicdomain/zero/1.0/", text: "CC0"}
const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/galleries",
  "/bioimage-archive/galleries/ai",
  "/bioimage-archive/galleries/ai/ai-ready-studies",
  `/bioimage-archive/galleries/ai/ai-ready-study/${studyInfo.accession_id}`,
]
---
<BaseLayoutWithBreadcrumbs pageTitle={uuid} breadcrumbs={breadcrumbs}>
    <div class="vf-stack vf-stack--500">
        <section class="vf-content | embl-grid--has-centered-content">
        <div style="padding-left: 10%;padding-right: 10%">
        <h1 class="vf-intro__heading vf-intro__heading--has-tag">{ studyInfo.accession_id }
                    <WebsiteStateButton/>
                </h1>
                <h2 class="vf-intro__subheading">{studyInfo.title}</h2>
              <br />
            <a href={`/bioimage-archive/galleries/ai/ai-ready-study/${studyInfo.accession_id}`}>
                    <button class="vf-button vf-button--primary vf-button--sm">Study Page</button>
                </a>
        </div>
        </section>
        <section class="vf-content "><a href={"/bioimage-archive/help/downloading-data#aws_client_download"}>How to download these images</a><br/></section>    
        <SourceAnnotatedImage annotatedImages={annotatedImages} sourceImage={sourceImage} vizarrURL={vizarrURL} btnID="CopyURLButton"/>
        <hr />
        <StudyComponents title="Annotated Datasets" id ="annotated_datasets" content={annotatedDatasetContent} license={license}/>
        <script type="application/json" id="images-length" set:html={JSON.stringify(annotatedImages.length)} />
        <script type="application/json" id="study-json" set:html={JSON.stringify(studyInfo.dataset)} />
</BaseLayout>
