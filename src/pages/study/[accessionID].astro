---
import BaseLayoutWithBreadcrumbs from "../../layouts/BaseLayoutWithBreadcrumbs.astro";
import StudyTitleInfo from "../../components/study-page/StudyTitleInfo.astro";
import StudyContentsSummary from "../../components/study-page/StudyContentsSummary.astro";
import DatasetInfo from "../../components/DatasetInfo.astro";
import ViewableImageTable from "../../components/ViewableImageTable.astro";
import DatasetFilesTable from "../../components/DatasetFilesTable.astro";

import { multilineTextRender, formatBytesToHumanSize, getStudyImage, getDatasetStatsByUUID, getStudyFromApiByAccession, getAllStudiesFromAPI} from "../../components/SharedJSFunctions.js"
import { type Study } from "../../components/SharedInterface.astro"

export async function getStaticPaths() {
  const studyMetadata = await getAllStudiesFromAPI();
  return studyMetadata.map((study) => {
    return {
      params: { accessionID: study.accession_id },
    };
  });
}

const tableOfContents = {
  "Study Information": "study",
  "Viewable Images": "viewable_images",
  "Dataset files": "file_references",
};

const { accessionID } = Astro.params;
const study = await getStudyFromApiByAccession(accessionID) as Study;
const images = study?.dataset.flatMap(dataset => dataset.image ?? [])

function getFileTypes(study) {
    const fileTypeList = []
    for (var dataset of study.dataset) {
        for (const file_type of dataset.file_type_aggregation) {
            if (!fileTypeList.includes(file_type)) {
              fileTypeList.push(file_type)
            }
        }
    }
    return fileTypeList
}

const datasetUUIDsAndFileStats = getDatasetStatsByUUID(study)

const headlineStats = {
  "Total Viewable Images":  study?.dataset.reduce((accumulator, dataset) => accumulator + dataset.image_count, 0) || 0,
  "Total files": study?.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_reference_count, 0) || 0,
  "Total size of files": formatBytesToHumanSize(study?.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_reference_size_bytes, 0) || 0),
};


const breadcrumbs = [
  "/bioimage-archive",
  "/bioimage-archive/studies",
]
---

<BaseLayoutWithBreadcrumbs pageTitle={`${study.accession_id}: ${study.title}`} breadcrumbs={breadcrumbs}>
  <body>
    <StudyTitleInfo study_info={study}/>

  <StudyContentsSummary 
    tableOfContents={tableOfContents} 
    originalStudyLink={`https://www.ebi.ac.uk/biostudies/BioImages/studies/${study.accession_id}`} 
    headlineStats={headlineStats}
  >
    <div slot="hero-image">
      <figure class="vf-figure vf-figure--align vf-figure--align-centered">
        <img class="vf-figure__image" src={getStudyImage(study)} />
      </figure>
    </div>
  </StudyContentsSummary>

  <hr/>

<section id="study" class="vf-content | embl-grid embl-grid--has-centered-content">
  <div>
    <h2 class="vf-section-header__heading">Study Information</h2>
  </div>

  <div style="overflow-wrap: anywhere;">
    <div class="study-info-item">
      <b>Description: </b> <Fragment set:html={multilineTextRender(study.description)}></Fragment>
    </div>
    {study.keyword && Array.isArray(study.keyword) && study.keyword.length > 0 && (    
      <div class="study-info-item">
        <b>Keywords: </b> {study.keyword.join(", ")}
      </div>      
    )}
    <div class="study-info-item">
      <b>Licence: </b> <a href={study.licence}>{study.licence}</a>
    </div>
    {study.acknowledgement && (
      <div class="study-info-item">
        <b>Acknowledgements: </b> <Fragment set:html={multilineTextRender(study.acknowledgement)}></Fragment>
      </div>
    )}
    {study.funding_statement &&  (
      <div class="study-info-item">
        <b>Funding statement: </b> <Fragment set:html={multilineTextRender(study.funding_statement)}></Fragment>
      </div>
    )}
    {study.grant && Array.isArray(study.grant) && study.grant.length > 0 && (
      <div class="study-info-item">
        <b>Grant information:</b>
        <ul>
          {study.grant.map((grant) => (
            <li style="font-size: inherit; line-height: inherit;">
              {/* Display the Funder names */}
              {grant.funder && Array.isArray(grant.funder) ? 
                grant.funder.map(f => f.display_name).join(", ") : 
                'Unknown Funder'
              }
              : 
              {/* Display and link the Grant ID (if present) to Europe PMC search */}
              {grant.id ? (
                <a 
                  href={`https://europepmc.org/grantfinder/grantdetails?query=gid:%22${encodeURIComponent(grant.id)}%22%20ga:%22${encodeURIComponent(grant.funder[0].display_name)}%22`}
                  target="_blank"
                  title={`Search Europe PMC for Grant ID: ${grant.id}`}
                >
                  {grant.id}
                </a>
              ) : (
                `No Grant ID provided`
              )}
            </li>
          ))}
        </ul>
      </div>
    )}
  </div>
</section>

  <hr/>

  <section id="study_components" class="vf-content | embl-grid embl-grid--has-centered-content">
    <div>
      <h2 class="vf-section-header__heading">Study Components</h2>
    </div>
    <div>
      {
        study.dataset.map((dataset) => (
          <DatasetInfo dataset={dataset} />
        ))
      }
    </div>
  </section>

  <hr/>

  <ViewableImageTable study={study} images={images}/>

  <hr/>

  <DatasetFilesTable datasetUUIDsAndFileStats={datasetUUIDsAndFileStats}/>

</BaseLayout>

<style>
  .study-info-item {
    margin-bottom: 1rem;
  }
</style>