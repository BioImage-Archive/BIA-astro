---
import BaseLayout from "../../layouts/BaseLayout.astro";
import StudyMetadata from "../../data/bia-study-metadata.json";
import ImageMetadata from "../../data/bia-image-export.json";
import DefaultDataSetMetatadata from "../../data/bia-test-study-metadata.json";
import StudyTitleInfo from "../../components/StudyTitleInfo.astro";
import DatasetInfo from "../../components/DatasetInfo.astro";
import ImageRow from "../../components/ImageRow.astro";
import default_img from "../../assets/bioimage-archive/default_hero/default_hero_1.png"
import {multiline_text_render} from "../../components/DatasetDetail.astro"

export function getStaticPaths() {
  return Object.values(StudyMetadata).map((dataset) => {
    return {
      params: { accession_id: dataset.accession_id },
    };
  });
}

const table_of_contents = {
  "Study Information": "study",
  "Viewable Images": "viewable_images",
  "All Images": "all_images",
};

const { accession_id } = Astro.params;
const study_info =
accession_id in StudyMetadata
    ? StudyMetadata[accession_id]
    : DefaultDataSetMetatadata;

var images = new Array()
for (var dataset of study_info.experimental_imaging_component) {
  for (var image of dataset.image) {
    images.push(image)
  }
}

function get_study_image(study_info) {
  const dataset_with_img = study_info.experimental_imaging_component.find((dataset) => dataset.example_image_uri.length > 0)
  if (dataset_with_img == undefined) {
    return default_img.src
  } else {
    return dataset_with_img.example_image_uri[0]
  }
}


function format_comma_separate_list(item, i, item_list) {
    if (i + 1 === item_list.length) {
        return item;
    } else {
        return item + ", ";
    }
}

function get_dataset_uuids_lengths(study_info) {
  var dataset_uuids = new Array()
  for (var dataset of study_info.experimental_imaging_component) {
    dataset_uuids.push([dataset.uuid,dataset.file_count,dataset.title_id])
}
  return dataset_uuids
}

const dataset_uuids = get_dataset_uuids_lengths(study_info)

const total_image_count = study_info.experimental_imaging_component.reduce((accumulator, dataset) => accumulator + dataset.image_count, 0);

const total_eid_file_count = study_info.experimental_imaging_component.reduce((accumulator, dataset) => accumulator + dataset.file_count, 0);
const total_annotation_file_count = study_info.image_annotation_component.reduce((accumulator, dataset) => accumulator + dataset.file_count, 0);
const total_file_count = total_eid_file_count + total_annotation_file_count

function get_file_types(study_info) {
    var file_type_list = new Array()
    for (var eic of study_info.experimental_imaging_component) {
        for (const file_type of eic.file_type_aggregation) {
            if (!file_type_list.includes(file_type)) {
              file_type_list.push(file_type)
            }
        }
    }
    return file_type_list
}

const total_file_type_list = get_file_types(study_info)
---

<BaseLayout pageTitle={study_info.accession_id}>
  <body>
    <section class="vf-content | embl-grid embl-grid--has-centered-content">
      <StudyTitleInfo study_info={study_info} />
    </section>

    <section class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <div>
          <h2 class="vf-section-header__heading">On this page</h2>
          <ul class="vf-list">
            {
              Object.entries(table_of_contents).map(([text_title, id]) => (
                <li class="vf-list__item">
                  <a class="vf-list__link" href={"#" + id}>
                    {text_title}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>

      <div>
        <figure class="vf-figure vf-figure--align vf-figure--align-centered">
          <img class="vf-figure__image" src={get_study_image(study_info)} />
        </figure>
      </div>

      <div>
        <a href={"https://www.ebi.ac.uk/biostudies/BioImages/studies/"+study_info.accession_id}>
          <button class="vf-button vf-button--primary vf-button--sm"
            >Original study</button
          >
        </a>
      </div>
    </section>

    <section class="vf-content">
      <div class="vf-grid | vf-grid__col-3 ">
        <div style="text-align: center;">Total Viewable Images<br /> {total_image_count}</div>
        <div style="text-align: center;">Total files <br /> {total_file_count}</div>
        <div style="text-align: center;">File Types <br />{total_file_type_list.map((type, i)=>(format_comma_separate_list(type, i, total_file_type_list)))}</div>
      </div>
    </section>

    <hr/>

    <section id="study" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Study Information</h2>
      </div>

      <div style="overflow-wrap: anywhere;">
        <div><b>Description: </b> <Fragment set:html={multiline_text_render(study_info.description)}></Fragment></div>
        <div><b>Licence: </b> {study_info.licence}<div>
      </div>
    </section>

    <hr/>

    <section id="study_components" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Study Components</h2>
      </div>
      <div>
        {
          study_info.experimental_imaging_component.map((eic_data) => (
            <DatasetInfo eic={eic_data} />
          ))
        }
        {
          study_info.image_annotation_component.map((eic_data) => (
            <DatasetInfo eic={eic_data} />
          ))
        }
      </div>
    </section>

    <hr/>

    <section class="vf-intro | embl-grid embl-grid--has-centered-content | section-spacing">

    <div class="vf-section-header">
      <h2 class="vf-section-header__heading" id="viewable_images">
        Viewable Images
      </h2>
    </div>
    <div>
      <table id="viewable_images_table" class="display">
        <thead>
          <tr>
            <th>Preview</th>
            <th>UUID</th>
            <th>Dataset</th>
            <th>Download Size (bytes)</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {
            images.map((image) => (
              <ImageRow image={image} dataset_title={study_info.experimental_imaging_component.find((dataset) => dataset.uuid == image.submission_dataset_uuid).title_id}/>
            ))
          }
        </tbody>
      </table>
    </div>
  </section>

  <section class="vf-intro | embl-grid embl-grid--has-centered-content | section-spacing">

    <div class="vf-section-header">
      <h2 class="vf-section-header__heading" id="file_references">
        All files
      </h2>
    </div>
    <div>
      <select id="dataset_selector" class="form-select" data-dataset-uuids={JSON.stringify(dataset_uuids)}>
        <option value="" disabled selected>Select a Dataset</option>
      </select>
      
      <table id="file_references_table" class="display" style="width:100%">
      </table>
    </div>
  </section>

    <script>
      let lastUuid = null; 
      document.addEventListener("DOMContentLoaded", function () {
        $("#viewable_images_table").DataTable({
          scrollX: true,
          columnDefs: [{ type: "natural", targets: 0 }],
        });
      });
      document.addEventListener("DOMContentLoaded", function () {
      const tableElement = document.getElementById("dataset_selector");
      const datasetDetails = JSON.parse(tableElement.dataset.datasetUuids);

      // Populate the dropdown menu
      const dropdown = document.getElementById("dataset_selector");
      datasetDetails.forEach(([uuid, fileCount, title], index) => {
          const option = document.createElement("option");
          option.value = uuid;
          option.text = `${title} (${fileCount} files)`; // Title with file count
          dropdown.appendChild(option);
      });

      let dataTable;
      let pageUuidMap = {}; // Map of page numbers to startFromUuid
      let currentDatasetUuid = null;

      // Function to initialize or update the DataTable
      const initializeDataTable = (datasetUuid, totalFiles) => {
        const apiUrl = `https://wwwdev.ebi.ac.uk/bioimage-archive/api/v2/dataset/${datasetUuid}/file_reference`;

        // Reset `pageUuidMap` for the selected dataset
        pageUuidMap = {};
        currentDatasetUuid = datasetUuid;

        // Destroy the existing DataTable instance if it exists
        if (dataTable) {
            dataTable.destroy();
            document.getElementById("file_references_table").innerHTML = ""; // Clear table content
        }

        // Initialize a new DataTable
        dataTable = $('#file_references_table').DataTable({
            serverSide: true,
            processing: true,
            ajax: function (data, callback) {
                const pageStart = data.start || 0;
                const pageLength = data.length || 25;
                const pageNumber = pageStart / pageLength;

                // Determine `startFromUuid` for the current page
                let startFromUuid = pageUuidMap[pageNumber] || null;

                // Construct the API URL
                let url = `${apiUrl}?page_size=${pageLength}`;
                if (startFromUuid) {
                    url += `&start_from_uuid=${startFromUuid}`;
                }

                fetch(url)
                    .then((response) => response.json())
                    .then((result) => {
                        const fileData = Array.isArray(result) ? result : [];
                        const recordsFetched = fileData.length;

                        // Update `pageUuidMap` for the next page
                        if (recordsFetched > 0) {
                            pageUuidMap[pageNumber + 1] = fileData[fileData.length - 1].uuid;
                        }

                        callback({
                            recordsTotal: totalFiles,
                            recordsFiltered: totalFiles,
                            data: fileData,
                        });
                    })
                    .catch((error) => {
                        console.error("Error fetching data:", error);
                        callback({ data: [] });
                    });
            },
            columns: [
                { data: "uuid", title: "File UUID" },
                { data: "file_path", title: "File Name" },
                { data: "uri", title: "Link" },
            ],
            pageLength: 25,
            searching: false,
            ordering: false,
        });
    };

    // Event listener for dropdown menu selection
    dropdown.addEventListener("change", (event) => {
        const selectedIndex = dropdown.selectedIndex - 1; // Dropdown options are 1-based
        if (selectedIndex >= 0) {
            const [selectedUuid, totalFiles] = datasetDetails[selectedIndex];
            initializeDataTable(selectedUuid, totalFiles);
        }
    });
});
    </script>
  </body>
</BaseLayout>
