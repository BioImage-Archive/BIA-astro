---
import BaseLayout from "../../layouts/BaseLayout.astro";
import StudyMetadata from "../../data/bia-study-metadata.json";
import StudyTitleInfo from "../../components/study-page/StudyTitleInfo.astro";
import StudyContentsSummary from "../../components/study-page/StudyContentsSummary.astro";
import DatasetInfo from "../../components/DatasetInfo.astro";
import ImageRow from "../../components/ImageTableRow.astro";
import default_img from "../../assets/bioimage-archive/default_hero/default_hero_1.png"
import {multiline_text_render} from "../../components/DatasetDetail.astro"

export function getStaticPaths() {
  return Object.values(StudyMetadata).map((dataset) => {
    return {
      params: { accession_id: dataset.accession_id },
    };
  });
}

const table_of_contents = {
  "Study Information": "study",
  "Viewable Images": "viewable_images",
  "All Images": "all_images",
};

const { accession_id } = Astro.params;
const study_info =
accession_id in StudyMetadata
    ? StudyMetadata[accession_id]
    : undefined;

var images = new Array()
for (var dataset of study_info.dataset) {
  for (var image of dataset.image) {
    images.push(image)
  }
}

function get_study_image(study_info) {
  const dataset_with_img = study_info.dataset.find((dataset) => dataset.example_image_uri.length > 0)
  if (dataset_with_img == undefined) {
    return default_img.src
  } else {
    return dataset_with_img.example_image_uri[0]
  }
}


function format_comma_separate_list(item, i, item_list) {
    if (i + 1 === item_list.length) {
        return item;
    } else {
        return item + ", ";
    }
}

function get_dataset_uuids_lengths(study_info) {
  var dataset_uuids = new Array()
  for (var dataset of study_info.dataset) {
    dataset_uuids.push([dataset.uuid,dataset.file_count,dataset.title_id])
}
  return dataset_uuids
}

const dataset_uuids = get_dataset_uuids_lengths(study_info)

const total_image_count = study_info.dataset.reduce((accumulator, dataset) => accumulator + dataset.image_count, 0);

const total_file_count = study_info.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_count, 0);

function get_file_types(study_info) {
    var file_type_list = new Array()
    for (var eic of study_info.dataset) {
        for (const file_type of eic.file_type_aggregation) {
            if (!file_type_list.includes(file_type)) {
              file_type_list.push(file_type)
            }
        }
    }
    return file_type_list
}

const total_file_type_list = get_file_types(study_info)


const headline_stats = {
  "Total Viewable Images":  study_info.dataset.reduce((accumulator, dataset) => accumulator + dataset.image_count, 0),
  "Total files": study_info.dataset.reduce((accumulator, dataset) => accumulator + dataset.file_count, 0),
  "File Types": total_file_type_list.map((type, i)=>(format_comma_separate_list(type, i, total_file_type_list)))
};


---

<BaseLayout pageTitle={study_info.accession_id}>
  <body>
    <StudyTitleInfo study_info={study_info} />

    <StudyContentsSummary 
      table_of_contents={table_of_contents} 
      original_study_link={"https://www.ebi.ac.uk/biostudies/BioImages/studies/"+study_info.accession_id} 
      headline_stats={headline_stats}
    >
      <div slot="hero-image">
        <figure class="vf-figure vf-figure--align vf-figure--align-centered">
          <img class="vf-figure__image" src={get_study_image(study_info)} />
        </figure>
      </div>
    </StudyContentsSummary>

    <hr/>

    <section id="study" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Study Information</h2>
      </div>

      <div style="overflow-wrap: anywhere;">
        <div><b>Description: </b> <Fragment set:html={multiline_text_render(study_info.description)}></Fragment></div>
        <div><b>Licence: </b> {study_info.licence}<div>
      </div>
    </section>

    <hr/>

    <section id="study_components" class="vf-content | embl-grid embl-grid--has-centered-content">
      <div>
        <h2 class="vf-section-header__heading">Study Components</h2>
      </div>
      <div>
        {
          study_info.dataset.map((dataset) => (
            <DatasetInfo dataset={dataset} />
          ))
        }
      </div>
    </section>

    <hr/>

    <section class="vf-intro | embl-grid embl-grid--has-centered-content | section-spacing">

    <div class="vf-section-header">
      <h2 class="vf-section-header__heading" id="viewable_images">
        Viewable Images
      </h2>
    </div>
    <div>
      <table id="viewable_images_table" class="display">
        <thead>
          <tr>
            <th>Preview</th>
            <th>UUID</th>
            <th>Dataset</th>
            <th>Download Size (bytes)</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {
            images.map((image) => (
              <ImageRow image={image} dataset_title={study_info.dataset.find((dataset) => dataset.uuid == image.submission_dataset_uuid).title_id}/>
            ))
          }
        </tbody>
      </table>
    </div>
  </section>

  <section class="vf-intro | embl-grid embl-grid--has-centered-content | section-spacing">

    <div class="vf-section-header">
      <h2 class="vf-section-header__heading" id="file_references">
        All files
      </h2>
    </div>
    <div>All files of dataset
      <select id="dataset_selector" class="form-select" data-dataset-uuids={JSON.stringify(dataset_uuids)}>
        <option value="" disabled selected>Select a Dataset</option>
      </select>
      
      <table id="file_references_table" class="display">
      </table>
    </div>
  </section>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        $("#viewable_images_table").DataTable({
          scrollX: true,
          columnDefs: [{ type: "natural", targets: 0 }],
        });
      });
      document.addEventListener("DOMContentLoaded", function () {
        const dropdown = document.getElementById("dataset_selector") as HTMLSelectElement; // Cast to HTMLSelectElement
        const datasetDetails = JSON.parse(dropdown.dataset.datasetUuids as string); // Ensure datasetUuids is parsed correctly


        // Populate the dropdown menu with dataset details
        datasetDetails.forEach(([uuid, fileCount, title]) => {
            const option = document.createElement("option");
            option.value = uuid;
            option.text = `${title} (${fileCount} files)`; 
            dropdown.appendChild(option);
        });

        let dataTable;

        // Function to initialize or update the DataTable
        const initializeDataTable = (datasetUuid: string, totalFiles: number) => {
            // set page size parameter of the api url with an upper limit of 1000
            const pageSize = totalFiles < 1000 ? totalFiles : 1000;
            const apiUrl = `https://wwwdev.ebi.ac.uk/bioimage-archive/api/v2/dataset/${datasetUuid}/file_reference?page_size=${pageSize}`;

            // Destroy the existing DataTable instance if it exists
            if (dataTable) {
                dataTable.destroy();
                document.getElementById("file_references_table")!.innerHTML = ""; // Clear the table's HTML content
            }

            // Fetch data and initialize the DataTable
            fetch(apiUrl)
                .then((response) => response.json())
                .then((fileData) => {
                    fileData = Array.isArray(fileData) ? fileData : [];

                    // Initialize the DataTable
                    dataTable = $('#file_references_table').DataTable({
                        data: fileData,
                        columns: [
                            { data: "uuid", title: "File UUID" },
                            { data: "file_path", title: "File Name" },
                            { data: "uri", title: "Link" },
                        ],
                        pageLength: 25, 
                        searching: true,
                        ordering: true,
                        processing: true,
                        scrollX: true,
                        columnDefs: [{ type: "natural", targets: 0 }],
                    });
                })
                .catch((error) => {
                    console.error("Error fetching data:", error);
                });
        };

        // Event listener for dropdown menu selection
        dropdown.addEventListener("change", () => {
            const selectedIndex = dropdown.selectedIndex; // Get the selected index
            if (selectedIndex > 0) { // Ignore the first "placeholder" option
                const [selectedUuid, totalFiles] = datasetDetails[selectedIndex - 1]; // Adjust for 0-based index
                initializeDataTable(selectedUuid, totalFiles); // Initialize the table with selected dataset
            }
        });

        // Trigger a default load for the first dataset 
        if (datasetDetails.length > 0) {
            dropdown.selectedIndex = 1; // Automatically select the first dataset
            const [defaultUuid, defaultTotalFiles] = datasetDetails[0];
            initializeDataTable(defaultUuid, defaultTotalFiles);
        }
    });

    </script>
  </body>
</BaseLayout>
