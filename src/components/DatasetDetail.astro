---
import external_link from  "../assets/bioimage-archive/external-link-svgrepo-com.png";
import { multilineTextRender} from "./SharedJSFunctions.js"


var { data, fieldMap } = Astro.props;

function taxonRenderWithLink(taxon) {
   
    const stringText = 
        taxon["common_name"] && taxon["scientific_name"] ? `<i>${taxon["scientific_name"]}</i> (${taxon["common_name"]})` :
        taxon["common_name"] ? taxon["common_name"] :
        taxon["scientific_name"] ? `<i>${taxon["scientific_name"]}</i>` : null

    if (taxon["ncbi_id"]) {
        return `<li class="vf-content"> ${stringText} <sup><a href=\"https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=${taxon["ncbi_id"]}\">${taxon["ncbi_id"]} <img src=\"${external_link.src}\" width="15" style="vertical-align:middle;margin:0px 0px 4px 0px"/></a></sup></li>`;
    } else {
        return `<li class="vf-content"> ${stringText}</li>`;
    }
}

function growthProtocolRender(growthProtocol) {
    return growthProtocol["protocol_description"]
}


function renderValue(key, value) {
    if (key === "organism_classification") {
        return `<ul>
            ${value.map((taxon) => taxonRenderWithLink(taxon)).join("")} 
            </ul>`;
    } else if (key === "growth_protocol") {
        return `${growthProtocolRender(value)}`;

    } else {
        return multilineTextRender(value)
    }
}

const renderField = Object.keys(data).map((key) => {
    if (key in fieldMap && !(data[key] == null)) {
        return `<div style="overflow-wrap: anywhere;"><b>${fieldMap[key]}:</b>&nbsp; ${renderValue(key, data[key])}</div>`;
    }
});

if (!("default_open" in data) ) {
    data.default_open = "True"
}
---

<details open={"default_open" in data ? data.default_open: "True"}>
    <summary>
        <b>{data.title}</b> {data.default_open? ' ':'(as above)'}
    </summary>

    <ul>
        <Fragment set:html={renderField} ` />
    </ul>
</details>
