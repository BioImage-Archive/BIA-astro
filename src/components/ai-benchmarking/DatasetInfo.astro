---
import { formatListItem, taxonRender, multilineTextRender, getStudyFromApiByAccession } from "../SharedJSFunctions";

const { dataset, datasetAIInfo, studyAccessionID } = Astro.props;
const studyMetadata = Object.fromEntries([[studyAccessionID, await getStudyFromApiByAccession(studyAccessionID)]])

function getTaxons(dataset) {
    var taxons
    if (!dataset.biological_entity || !Array.isArray(dataset.biological_entity)) {
        taxons = [];
    }

    taxons = dataset.biological_entity
        .flatMap(entity => entity.organism_classification || [])
        .filter(item => typeof item === "object"); 

    var taxonHTMLList = new Array()
    for (var taxon of taxons) {
        taxonHTMLList.push(taxonRender(taxon))
    }

    return taxonHTMLList
};

function getBiologicalEntity(dataset) {
    var biosamples
    if (!dataset.biological_entity || !Array.isArray(dataset.biological_entity)) {
        biosamples = [];
    }

    biosamples = dataset.biological_entity
        .flatMap(entity => entity.biological_entity_description || []); 

    return biosamples.reduce(formatListItem, "")
};


function getImagingType(dataset) {
    var imagingTypeList = new Array()
    for (var ia of dataset.acquisition_process) {
        for (var method_names of ia.imaging_method_name) {
            if (!imagingTypeList.includes(method_names)) {
                imagingTypeList.push(method_names)
            }
        }
    }
    return imagingTypeList
}

function displayImagingType(dataset) {
    const imageTypeList = getImagingType(dataset)
    const imgTypeDisplay = imageTypeList.reduce(formatListItem, "")
    if (imgTypeDisplay.length > 50 * imageTypeList.length) {
        // Avoid displaying full method text on dataset cards.
        return 'See details of study'
    } else {
        return imgTypeDisplay
    }
}

function renderTaxonList(taxon_list) {
    return taxon_list.reduce(formatListItem, "");
}

const taxons = getTaxons(dataset)


function getAnnotationMethodInformation() {
    if (Object.keys(datasetAIInfo).includes("annotation_study")) {
        const annotation_dataset = studyMetadata[datasetAIInfo.annotation_study].dataset.filter(dataset => dataset.uuid == datasetAIInfo.annotation_dataset)[0]
        return annotation_dataset.annotation_method[0].protocol_description
    } else if (Object.keys(datasetAIInfo).includes("annotation_dataset")) {
        const annotation_dataset = studyMetadata[studyAccessionID].dataset.filter(dataset => dataset.uuid == datasetAIInfo.annotation_dataset)[0]
        return annotation_dataset.annotation_process[0].protocol_description
    } else if (Object.keys(datasetAIInfo).includes("annotation_method_override")) {

        return datasetAIInfo.annotation_method_override
    } else {
        return null
    }
}
const annotation_info = getAnnotationMethodInformation()
---

<div style="margin-bottom: 1rem;">
    <div>
        <b style="font-size: 14pt;">{dataset.title}</b>
    </div>
    <ul>
        {
            taxons && taxons.length > 0 && 
                (
                    <div>
                        <b>Organism:</b> <Fragment set:html={renderTaxonList(taxons)}/>
                    </div>
                )
        }
        {
            taxons && taxons.length > 0 && 
                (
                    <div>
                    <b>Biological Entity:</b> {getBiologicalEntity(dataset)}
                    </div>
                )
        }
        {
            taxons && taxons.length > 0 && 
                (
                    <div>
                    <b>Imaging Method:</b> {displayImagingType(dataset)}
                    </div>
                )
        }
        {
            annotation_info && (
                    <div>
                    <b>Annotation Method:</b> {multilineTextRender(annotation_info)}
                    </div>
            )
        }
    </ul>
</div>
