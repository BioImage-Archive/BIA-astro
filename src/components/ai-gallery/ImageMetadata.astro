---
const { url, imageRep, imageAtrributes, text, btnID} = Astro.props;

function getMicronSize(rep) {
  if (!rep?.voxel_physical_size_x || !rep?.voxel_physical_size_y) return ["0", "0"];
  return [
    (1e6 * rep.voxel_physical_size_x ** 2).toPrecision(2),
    (1e6 * rep.voxel_physical_size_y ** 2).toPrecision(2),
  ];
}
const vizarrURL = "https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source="
const [tissue_x, tissue_y] = getMicronSize(imageRep);

const vizarrViewer = text == "Annotation"? "OpenAnnotationInVizarr": "OpenSourceInVizarr";
const itkViewer = text == "Annotation"? "OpenAnnotationInITK": "OpenSourceInITK";
const divID = text == "Annotation"? "annotated-metadata": "source-metadata";
const sizeSpan = text == "Annotation"? "annotated-size": "source-size";
const pxielSpan = text == "Annotation"? "annotated-pixels": "source-pixels";
const channelSpan = text == "Annotation"? "annotated-channels": "source-channels";
const timestepSpan = text == "Annotation"? "annotated-timesteps": "source-timesteps";

---
<div style="min-width: 48%">
    <a href={vizarrURL+url} id={vizarrViewer}>
        <button class="vf-button vf-button--primary vf-button--sm">Open {text} in Vizarr viewer</button>
    </a> 
    <a href={"https://kitware.github.io/itk-vtk-viewer/app/?fileToLoad="+url} id={itkViewer}>
        <button class="vf-button vf-button--primary vf-button--sm">Open {text} in ITK viewer</button>
    </a>
    <button class="vf-button vf-button--primary vf-button--sm" id={btnID} data-url={vizarrURL+url}>Copy {text} OME-Zarr URI</button><br/>
    
    <h3>Image metadata</h3>
    <b>Image size: </b> <span id={sizeSpan}>{tissue_x}μm x {tissue_y}μm</span><br>
    <span id={pxielSpan}>{imageRep?.size_x} x {imageRep?.size_y} pixels</span><br />
    <span id={channelSpan}>{imageRep?.size_c} channels</span><br />
    <span id={timestepSpan}>{imageRep?.size_t} timesteps</span>
    <br /> <br />
    <div id={divID}>
    {
      imageAtrributes && Object.keys(imageAtrributes).length === 0 ? <span></span> : (
        <>
          <h3>Additional metadata</h3>
          {Object.entries(imageAtrributes).map(([key, value]) => (
            <>
            <b>{key}:</b> {value}<br />
        </>
        ))}
        </>
      )
    }
    </div>
</div>
<script type="module">
    const numberOfAnnotatedImages = JSON.parse(document.getElementById("images-length").textContent);
    console.log(numberOfAnnotatedImages)
    if(numberOfAnnotatedImages <= 1){
      document.getElementsByClassName("imageslider")[0].style.display = "none";
      document.getElementsByClassName("imageslider")[1].style.display = "none";
    }else{
      let currentSlide = 0;
      const slider = document.getElementById("slider");
      const slides = slider.children;
      const updateMetadata = (uuid) => {
          const image = JSON.parse(document.getElementById("images-json").textContent).find(ai => ai.uuid === uuid)
          const rep = image.representation.find((r) => r.image_format === ".ome.zarr");
          const attributes = image.additional_metadata.find(meta =>
              meta.name.startsWith("attributes_from_file_reference")
          )?.value?.attributes || {};
          const micronX = (1e6 * rep.voxel_physical_size_x ** 2).toPrecision(2);
          const micronY = (1e6 * rep.voxel_physical_size_y ** 2).toPrecision(2);
          document.getElementById("annotated-size").innerText = `${micronX}μm x ${micronY}μm`;
          document.getElementById("annotated-pixels").innerText = `${rep.size_x} x ${rep.size_y} pixels`;
          document.getElementById("annotated-channels").innerText = `${rep.size_c} channels`;
          document.getElementById("annotated-timesteps").innerText = `${rep.size_t} timesteps`;
          const metaContainer = document.getElementById("annotated-metadata");
          metaContainer.innerHTML = "<h3>Additional metadata</h3>";
          Object.entries(attributes).forEach(([key, value]) => {
              const line = document.createElement("div");
              line.innerHTML = `<b>${key}:</b> ${value}<br />`;
              metaContainer.appendChild(line);
          });
          const s3url = rep.file_uri[0].replace('https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source=', '');
          const copyBtn = document.getElementById("CopyAnnotationButton");
          copyBtn.dataset.url = 'https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source='+s3url;
          document.getElementById("OpenAnnotationInVizarr").href = "https://uk1s3.embassy.ebi.ac.uk/bia-zarr-test/vizarr/index.html?source="+rep.file_uri[0];
          document.getElementById("OpenAnnotationInITK").href = "https://kitware.github.io/itk-vtk-viewer/app/?fileToLoad="+s3url;
          const studyInfo = JSON.parse(document.getElementById("study-json").textContent)
          const annotationTypeMethod = studyInfo.dataset.find((d) => d['uuid'] == image.submission_dataset_uuid).annotation_process[0] || {title: "", annotation_criteria:""};
          document.getElementById("annotation-type").innerText = annotationTypeMethod.title;
          document.getElementById("annotation-method").innerText = annotationTypeMethod.annotation_criteria
      };
      window.slide = function(direction) {
          const total = slides.length;
          currentSlide = (currentSlide + direction + total) % total;
          slider.style.transform = `translateX(-${currentSlide * 100}%)`;
          const currentUUID = slides[currentSlide].id;
          document.getElementById("AnnotatedImageLength").innerText = currentSlide+1;
          updateMetadata(currentUUID);
      };
      updateMetadata(slides[0].id);
    }
    
</script>
<script>
  const originalText = "Copy Annotation OME-Zarr URI";
    document.getElementById("CopyURLButton").onclick = async (e) => {
      const target = (e.target as HTMLElement)
      const url = target.dataset.url;
      await navigator.clipboard.writeText(url);
      target.innerText = "URI Copied";
      setTimeout(() => target.innerText = originalText, 700);
    };
    document.getElementById("CopyAnnotationButton").onclick = async (e) => {
      const target = (e.target as HTMLElement)
      const url = target.dataset.url;
      await navigator.clipboard.writeText(url);
      target.innerText = "URI Copied";
      setTimeout(() => target.innerText = originalText, 700);
    };
</script>