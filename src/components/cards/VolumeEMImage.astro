---
const { image } = Astro.props;
---
<article class="vf-card vf-card--brand vf-card--bordered custom-card" style="max-width:400px">
    <div class="vf-card__content | vf-stack vf-stack--400">
        <h3 class="vf-card__heading title-container">
            <div class="title-text">{ image.label }</div>
        </h3>
        <p class="subtitle-text">
            <i>{ image.organism }</i>, { 
                image.imaging_method === "Focused Ion Beam Scanning Electron Microscopy" ? "FIB-SEM" :
                image.imaging_method === "Serial Block Face Scanning Electron Microscopy" ? "SBF-SEM" :
                image.imaging_method === "Serial Block-Face Scanning Electron Microscopy" ? "SBF-SEM" :
                image.imaging_method === "Serial Block-face Scanning Electron Microscopy (SBF-SEM)" ? "SBF-SEM" :
                image.imaging_method
            }
        </p>
    </div>
    <div class="image-container">
        <img src={ image.static_display_src } alt="" class="vf-card__image" loading="lazy" style="aspect-ratio: 1/1;">
        <div class="dataset-link">
            <a href={"/bioimage-archive/dataset/" + image.submitted_in_study_accession}>{ image.submitted_in_study_accession }</a>
        </div>
        <div class="license-badge">
            <a href="https://creativecommons.org/public-domain/cc0/" target="_blank" rel="noopener">
                <img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0 License">
            </a>
        </div>
        <div class="size-bar">
            <span class="physical-size">
                <code>{ Number(image.physical_dim_x * 1e6).toPrecision(2) }<span class="x-text">×</span>{ Number(image.physical_dim_y * 1e6).toPrecision(2) }<span class="x-text">×</span>{ Number(image.physical_dim_z * 1e6).toPrecision(2) }</code><span class="unit-text"> µm</span>
            </span>
            <span class="image-size">
                <code>{ image.size_x }<span class="x-text">×</span>{ image.size_y }<span class="x-text">×</span>{ image.size_z }</code><span class="unit-text"> vx</span>
            </span>
            <span class="voxel-size">
                <code>{ Math.round(image.voxel_size_x * 1e9) }<span class="x-text">×</span>{ Math.round(image.voxel_size_y * 1e9) }<span class="x-text">×</span>{ Math.round(image.voxel_size_z * 1e9) }</code><span class="unit-text"> nm voxels</span>
            </span>
        </div>
        <div class="cube-wrapper">
            <div class="cube" style={`
                --scale-x: ${image.physical_dim_x/Math.max(image.physical_dim_x, image.physical_dim_y, image.physical_dim_z)}; 
                --scale-y: ${image.physical_dim_y/Math.max(image.physical_dim_x, image.physical_dim_y, image.physical_dim_z)}; 
                --scale-z: ${image.physical_dim_z/Math.max(image.physical_dim_x, image.physical_dim_y, image.physical_dim_z)};
                --grid-lines-x: ${Math.min(10, Math.max(3, Math.floor(image.size_x/1000)))};
                --grid-lines-y: ${Math.min(10, Math.max(3, Math.floor(image.size_y/1000)))};
                --grid-lines-z: ${Math.min(10, Math.max(3, Math.floor(image.size_z/1000)))};
            `}>
                <div class="cube__face cube__face--front"></div>
                <div class="cube__face cube__face--back"></div>
                <div class="cube__face cube__face--right"></div>
                <div class="cube__face cube__face--left"></div>
                <div class="cube__face cube__face--top"></div>
                <div class="cube__face cube__face--bottom"></div>
            </div>
        </div>
    </div>
    <div class="vf-card__content | vf-stack vf-stack--400">
        <div class="button-container">
            <button><a href={ image.view_link }>Neuroglancer</a></button>
            <button><a href={"/bioimage-archive/image/" + image.uuid}>Metadata</a></button>
            <button onclick="this.textContent='Copied!'; setTimeout(() => this.textContent='Copy OME-Zarr URI', 2000); navigator.clipboard.writeText(this.getAttribute('data-uri'))" data-uri={image.ome_zarr_image_uri}>Copy OME-Zarr URI</button>
            <button><a href={`https://ftp.ebi.ac.uk/empiar/world_availability/${image.submitted_in_study_accession.split('-')[1]}/data/`}>Raw data</a></button>
        </div>
    </div>
</article>

<style>
    .row {
        margin-bottom: 5px;
    }
    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        padding: 8px 12px 4px 12px;
        justify-content: center;
    }
    button {
        padding: 6px 12px;
        border: 1px solid #666;
        border-radius: 4px;
        background: #f5f5f5;
        transition: all 0.2s ease;
    }
    button:hover {
        background: #e0e0e0;
        transform: translateY(-1px);
    }
    button a {
        text-decoration: none;
        color: #333;
    }
    .title-container {
        height: 2em;  /* Approximately 3 lines of text */
        margin: 0;
        overflow: hidden;
    }
    .title-text {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 0.8em;
        line-height: 1.2em;
    }
    .subtitle-text {
        font-size: 0.9em;
        color: #666;
        margin: 0;
        padding: 0;
    }
    .image-container {
        width: 100%;
        overflow: hidden;
        position: relative;
    }
    .size-bar {
        position: absolute;
        bottom: 10px;
        left: 10px;
        background: rgba(243, 243, 243, 0.9);
        padding: 8px 12px;
        font-size: 0.9em;
        display: flex;
        flex-direction: column;
        gap: 4px;
        border-radius: 4px;
        max-width: 80%;
    }
    .physical-size, .image-size, .voxel-size {
        min-width: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .x-text {
        font-size: 0.8em;
        vertical-align: middle;
        color: #666;
    }
    .unit-text {
        font-size: 0.8em;
        color: #666;
    }
    .custom-card {
        border: 2px solid #999;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.15);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    .custom-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.25);
    }

    .dataset-link {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(243, 243, 243, 0.9);
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }
    .dataset-link a {
        color: #333;
        text-decoration: none;
    }
    .dataset-link a:hover {
        text-decoration: underline;
    }
    .license-badge {
        position: absolute;
        bottom: 80px;
        right: 10px;
        background: rgba(243, 243, 243, 0.9);
        padding: 4px;
        border-radius: 4px;
    }
    .license-badge img {
        height: 20px;
        width: auto;
    }
    .cube-wrapper {
        width: 60px;
        height: 60px;
        perspective: 200px;
        position: absolute;
        bottom: 10px;
        right: 10px;
        background: rgba(243, 243, 243, 0.9);
        padding: 8px;
        border-radius: 4px;
    }

    .cube {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
        transform: translateZ(-25px) rotateX(-20deg) rotateY(-45deg);
        animation: rotate 20s infinite linear;
        transform-origin: center center;
    }

    /* Front and back faces */
    .cube__face--front, .cube__face--back {
        position: absolute;
        left: 50%;
        top: 50%;
        width: calc(50px * var(--scale-x));
        height: calc(50px * var(--scale-y));
        margin-left: calc(50px * var(--scale-x) / -2);
        margin-top: calc(50px * var(--scale-y) / -2);
        background: rgba(200, 200, 200, 0.2);
        background-image: 
            linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
        background-size: 
            calc((50px * var(--scale-x)) / var(--grid-lines-x)) 
            calc((50px * var(--scale-y)) / var(--grid-lines-y));
        border: 1px solid rgba(0, 0, 0, 0.3);
    }

    /* Right and left faces */
    .cube__face--right, .cube__face--left {
        position: absolute;
        left: 50%;
        top: 50%;
        width: calc(50px * var(--scale-z));
        height: calc(50px * var(--scale-y));
        margin-left: calc(50px * var(--scale-z) / -2);
        margin-top: calc(50px * var(--scale-y) / -2);
        background: rgba(200, 200, 200, 0.2);
        background-image: 
            linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
        background-size: 
            calc((50px * var(--scale-z)) / var(--grid-lines-z)) 
            calc((50px * var(--scale-y)) / var(--grid-lines-y));
        border: 1px solid rgba(0, 0, 0, 0.3);
    }

    /* Top and bottom faces */
    .cube__face--top, .cube__face--bottom {
        position: absolute;
        left: 50%;
        top: 50%;
        width: calc(50px * var(--scale-x));
        height: calc(50px * var(--scale-z));
        margin-left: calc(50px * var(--scale-x) / -2);
        margin-top: calc(50px * var(--scale-z) / -2);
        background: rgba(200, 200, 200, 0.2);
        background-image: 
            linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
        background-size: 
            calc((50px * var(--scale-x)) / var(--grid-lines-x)) 
            calc((50px * var(--scale-z)) / var(--grid-lines-z));
        border: 1px solid rgba(0, 0, 0, 0.3);
    }

    .cube__face--front  { transform: translateZ(calc(50px * var(--scale-z) / 2)); }
    .cube__face--back   { transform: translateZ(calc(50px * var(--scale-z) / -2)) rotateY(180deg); }
    .cube__face--right  { transform: translateX(calc(50px * var(--scale-x) / 2)) rotateY(90deg); }
    .cube__face--left   { transform: translateX(calc(50px * var(--scale-x) / -2)) rotateY(-90deg); }
    .cube__face--top    { transform: translateY(calc(50px * var(--scale-y) / -2)) rotateX(90deg); }
    .cube__face--bottom { transform: translateY(calc(50px * var(--scale-y) / 2)) rotateX(-90deg); }

    @keyframes rotate {
        from {
            transform: translateZ(-25px) rotateX(-20deg) rotateY(0deg);
        }
        to {
            transform: translateZ(-25px) rotateX(-20deg) rotateY(360deg);
        }
    }
</style>
