---
import { type Facet } from "./Search.astro"

const { facet, id } = Astro.props;
const title= facet['title'];
const filter= facet["valuesAndCounts"];
const selectedValue= facet["selectedValue"];

export function capitalizeFirstLetter(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

//const inputClass = facetType === "radio" ? "" : ""; // TO-DO: Check if using the vf is better than not using it
---
<div class="facet-section" id={`facet-section-${id}`}>
  <div class="facet-title">
  <legend 
    class="facet-legend | vf-form__helper" 
    onclick={`toggleFacet('${id}')`}
    tabindex="0" 
    role="button"
  >
    <span class="facet-arrow" aria-hidden="true"></span>
    {capitalizeFirstLetter(title)}
    
  </legend>
  <div class="facet-count">{Object.values(filter).length}</div>
  </div>
  <div class="facet-options" id={`facet-option-${id}`}>
    {Object.entries(filter).map(([key, count], index) => (
      <div class="facet-option">
        <div class="facet-label-group" style="width: 100%">
          <input
            type="checkbox"
            name={id}
            value={key}
            id={`${id}-${index}`}
            checked={selectedValue ? Object.values(selectedValue).includes(key) : false}
            onchange={`document.getElementById('facets')?.submit()`}
          />
          <label for={`${id}-${index}`} style="width: 100%" class="facet-label vf-grid">{key}<div class="facet-count">{count}</div></label>
        </div>
        
      </div>
    ))}
  </div>
</div>

<script is:inline>
  function toggleFacet(id) {
    const section = document.getElementById(`facet-section-${id}`);
    const options = document.getElementById(`facet-option-${id}`);
    if (section && options) {
      const isCollapsed = section.classList.toggle('collapsed');
      options.style.display = isCollapsed ? 'none' : 'block';
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.facet-section').forEach((section) => {
      const secClass = isMobile()? "collapsed": "open";
      const styleDisplay = isMobile()? "none": "block";
      section.classList.add(secClass);
      const options = section.querySelector('.facet-option');
      if (options) options.style.display = styleDisplay;
    });
  });

  function isMobile() {
    const regex = /Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
    return regex.test(navigator.userAgent);
  }

</script>
<style>
  .facet-section {
    border-bottom: 1px solid #ccc;
    margin-bottom: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .facet-legend {
    cursor: pointer;
    padding: 0 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
  }

  .facet-arrow::before {
    content: ">";
    display: inline-block;
    transition: transform 0.2s ease;
  }

  .facet-section:not(.collapsed) .facet-arrow::before {
    content: ">";
    transform: rotate(90deg);
  }
  .facet-label {
    display: flex;
  }
  .facet-option {
    display: flex;
    justify-content: space-between;
    margin: 0.25rem 0;
    padding: 0 0rem;
  }

  .facet-label:hover {
    background-color: lightgray;
  }

  .facet-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 0.25rem 0;
    padding: 0 0rem;
  }

  .facet-label-group {
    display: flex;
    align-items: left;
    gap: 0.3rem;
    color: #3b6fb6;
  }

  .facet-count {
    font-size: 0.9rem;
    color: #666;
    min-width: 1rem;
    text-align: right;
    align-items: end;
  }
</style>