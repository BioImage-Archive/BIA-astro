---
import StudyCard from '../../components/cards/BrowseStudyCard.astro';
import SearchFilter from '../../components/search/SearchFilter.astro';
import  "../../styles/toggle.css"
import "../../styles/browse_controls.css"
import "../../styles/filter_cards.css"
import { getTaxons, getImagingMethodType } from "../../components/SharedJSFunctions.js";

const { query, results, organism, imaging_method, release_year } = Astro.props;

const organismList = new Set(results.map( (item) => getTaxons(item._source)).flat().sort())
const imagingMethodList = new Set(results.map( (item) => getImagingMethodType(item._source)).flat().sort())
const releaseYearList = new Set(results.map( (item) => item._source.release_date.split("-")[0] ).flat().sort())
const facets = {"facet.organism": organismList, "facet.imaging_method": imagingMethodList,"facet.release_year": releaseYearList}
const selectedValues = {"facet.organism": organism, "facet.imaging_method": imaging_method,"facet.release_year": release_year}
const titles = {"facet.organism": "Organism", "facet.imaging_method": "Imaging Method","facet.release_year": "Release Year"}
---
<section class="vf-content">
  <br>
  <div class="vf-grid vf-grid__col-2" >
    <div><h2>Search results for <a href=`/bioimage-archive/studies?query=${query}`><strong>{query}</strong></a></h3></div>
    <div>
        <div class="vf-form" style="display: flex;">
          <label for="sort" class="vf-form__label" style="flex: 1; margin:auto;margin-left: 40%">Sort by:</label>
          <select name="sort" id="sort" class="vf-form__select" style="flex: 3">
            <option value="relevance">Relevance</option>
            <option value="az">A-Z (accession ID)</option>
            <option value="za">Z-A (accession ID)</option>
          </select>
        </div>
    </div>
  </div>
</section>
<section class="vf-content">
  <div class="vf-grid vf-grid__col-5">
    <div><h3 style="float: right">Filter by: </h3></div>
    <div class="vf-grid__col--span-3">
      <form id="filters" method="GET" action="/bioimage-archive/studies" class="vf-grid vf-grid__col-3">
        {Object.keys(facets).map((facet) => <>
        <SearchFilter title={titles[facet]} id={facet} filter={facets[facet]} selectedValue={selectedValues[facet]} />
        </>
        )}
        <input type="hidden" name="query" value={query}  />
      </form>
    </div>
    <div><button class="vf-button vf-button--primary vf-button--sm" onclick={`location.href='/bioimage-archive/studies?query=${query}'`}>Reset filters</button></div>
  </div>
</section>
<section class="vf-content">
  <div>
    {query && (
      <>
        <section class="vf-card-container | vf-card-container__col-4 | vf-u-fullbleed"  style="--vf-card__image--aspect-ratio: 16 / 9;">
        <div class="vf-card-container__inner">
        {results.length === 0 ? (
          <p>No results found.</p>
        ) : (
          results.map((item) => (
            <StudyCard
            study={item._source} studyPageRoot="study"
            />
          ))
        )}
        </div></section>
      </>
    )}
  </div>
</section>



<script type="module">
  const sortSelect = document.getElementById('sort');
  const container = document.querySelector('.vf-card-container__inner');
  const originalCards = Array.from(container.querySelectorAll('.vf-card'));
  
  function parseAccession(id) {
    const match = id.match(/^([A-Z\-]+)(\d+)$/i);
    if (!match) return [id, 0]; // fallback
    return [match[1], parseInt(match[2], 10)];
  }

  sortSelect.addEventListener('change', (event) => {
    const sortBy = event.target.value;
    const cards = Array.from(container.querySelectorAll('.vf-card'));

    let sortedCards;

    if (sortBy === 'az' || sortBy === 'za') {
      sortedCards = cards.sort((a, b) => {
        const aId = a.dataset.message.split(";")[0]; // e.g. S-BIAD1234
        const bId = b.dataset.message.split(";")[0];

        const [aPrefix, aNum] = parseAccession(aId);
        const [bPrefix, bNum] = parseAccession(bId);

        const prefixCompare = aPrefix.localeCompare(bPrefix);
        if (prefixCompare !== 0) return sortBy === 'az' ? prefixCompare : -prefixCompare;

        return sortBy === 'az' ? aNum - bNum : bNum - aNum;
      });
    } else {
      sortedCards = originalCards;
    }

    container.innerHTML = '';
    sortedCards.forEach(card => container.appendChild(card)); 
  } 
  );
</script>
