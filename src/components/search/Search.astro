---
import StudyCard from '../../components/cards/BrowseStudyCard.astro';
import SearchFacet from './SearchFacet.astro';
import SearchSelectedFacet from './SearchSelectedFacet.astro';
import  "../../styles/toggle.css"
import "../../styles/browse_controls.css"
import "../../styles/filter_cards.css"

interface SearchHits<T = unknown> {
  total: {
    value: number;
    relation: string; 
  };
  max_score: number | null;
  hits: T[]; 
}

export interface Facet {
  key: string;
  key_as_string?: string;
  doc_count: number;
}

interface FacetData {
  buckets: Facet[];
  doc_count_error_upper_bound: number;
  sum_other_doc_count: number;
}

const { query, hits, facetData, organism, imagingMethod, releaseYear } =
  Astro.props as {
    query: string;
    hits: SearchHits<Record<string, unknown>>;
    facetData: FacetData;
    organism: string;
    imagingMethod: string;
    releaseYear: string;
  };

export function generateParamString(url, query, organism, imagingMethod, releaseYear, urlType){
  url += `?query=${encodeURIComponent(query)}`;
  url = addSelectedFacetToSearchURL(organism, urlType === "search"? "organism" : "facets.scientific_name", url);
  url = addSelectedFacetToSearchURL(imagingMethod, urlType === "search"? "imaging_method" :"facets.imaging_method", url); 
  url = addSelectedFacetToSearchURL(releaseYear, urlType === "search"? "year" : "facets.release_date", url);
  return url
}

export function addSelectedFacetToSearchURL(selectedList, facet, url){
    return selectedList && selectedList.length > 0 ? url+"&"+new URLSearchParams(selectedList.map(select => {return `&${facet}=${encodeURIComponent(select)}`}).join("&")).toString(): url;
}

const totalResults = hits.total.value
const results = hits.hits
const studiesURL = "/bioimage-archive/studies"

const facets = Object.entries(facetData).reduce((acc, [facet, data]) => {
  let selectedValue, title, facetType;
  const listOfValues = Object.values(data?.buckets as Facet)
    .map( (val) => val?.key_as_string || val?.key)
    .sort((a, b) => a.toString().toLowerCase().localeCompare(b.toString().toLowerCase()))
  switch (facet) {
    case "scientific_name":
      selectedValue = organism;
      title = "Organism";
      facetType = "checkbox";
      break;
    case "imaging_method":
      selectedValue = imagingMethod;
      title = "Imaging Method";
      facetType = "checkbox";
      break;
    case "release_date":
      selectedValue = releaseYear;
      title = "Release Year";
      facetType = "checkbox";
      break;
    default:
      return acc; // Skip unknown facets
  }

  acc[`facets.${facet}`] = {
    listOfValues,
    selectedValue,
    title,
    facetType,
    counts: data?.buckets || []
  };

  return acc;
}, {});

---
<section class="vf-content | vf-grid vf-grid__col-5">
  <div>
    <br />
    <div style="display: flex;">        
      <div style="padding-top: 0.4em">
      <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 16 16">
        <rect width="16" height="16" fill="none" />
        <path fill="currentColor" d="M6 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0M2 4a3 3 0 0 1 3-3h6a3 3 0 1 1 0 6H5a3 3 
          0 0 1-3-3m3-2a2 2 0 1 0 0 4h6a2 2 0 1 0 0-4zm6 10a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-9-1a3 3 0 0 1 3-3h6a3 
          3 0 1 1 0 6H5a3 3 0 0 1-3-3m3-2a2 2 0 1 0 0 4h6a2 2 0 1 0 0-4z" />
        </svg> 
      </div>
      <div><h3> Filter by</h3></div>
    </div>
    <div>
      <form id="facets" method="GET" action="/bioimage-archive/studies" class="vf-form">
        {Object.entries(facets).map(([id, facet], i) => <>
        <SearchFacet title={facet['title']} id={id} filter={facet["listOfValues"]} selectedValue={facet["selectedValue"]} facetType={facet["facetType"]} counts={facet["counts"]} />
        </>
        )}
        <input type="hidden" name="query" value={query}  />
      </form>
    </div>
  </div>
  <div class="vf-grid__col--span-4" style="min-width:50%">
    {query && (
      <>
        <section class="vf-content">
          <div class="vf-grid" style="display: flex;min-width:90%">
            <div><h2>Search results for <a href={`/bioimage-archive/studies?query=${query}`}><strong>{query}</strong></a></h2></div>
            <div class="vf-form" style="display: flex" id="sortBy">
            <label for="sort" class="vf-form__label" style="flex: 1; margin:auto;margin-left: 30%">Sort by:</label>
            <select name="sort" id="sort" class="vf-form__select" style="flex: 3">
              <option value="relevance">Relevance</option>
              <option value="az">A-Z (accession ID)</option>
              <option value="za">Z-A (accession ID)</option>
            </select>
            </div>
          </div>
          <section>
          <div><span id="paginated-results">1-{results.length} of {totalResults} results</span></div>
          <div id="selected-facets" style="margin-top: 1rem; margin-bottom: 1rem;">
            <SearchSelectedFacet selectedList={organism} url={studiesURL} text={"Organism"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear}/> 
            <SearchSelectedFacet selectedList={imagingMethod} url={studiesURL} text={"Imaging Method"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear}/> 
            <SearchSelectedFacet selectedList={releaseYear} url={studiesURL} text={"Release Year"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear}/>           
          </div>
          <div class="vf-card-container | vf-card-container__col-4 | vf-u-fullbleed"  style="--vf-card__image--aspect-ratio: 16 / 9;">
            <div class="vf-card-container__inner">
            {results.length === 0 ? (
              <p>No results found.</p>
            ) : (
              results.map((item) => (
                <StudyCard
                study={item._source} studyPageRoot="study"
                />
              ))
            )}
            </div>
          </div>
          </section>
        </section>
      </>
    )}
  </div>
</section>
<script type="application/json" id="total-search-result" set:html={JSON.stringify(totalResults)} />
<script type="module">
  const sortSelect = document.getElementById('sort');
  const container = document.querySelector('.vf-card-container__inner');
  const originalCards = Array.from(container.querySelectorAll('.vf-card'));
  const totalResults = JSON.parse(document.getElementById('total-search-result').textContent);
  const resultsCountSpan = document.getElementById('paginated-results');
  const pageSize = 9;
  let currentPage = 1;
  let sortedCards = [...originalCards]; 

  function parseAccession(id) {
    const match = id.match(/^([A-Z\-]+)(\d+)$/i);
    if (!match) return [id, 0];
    return [match[1], parseInt(match[2], 10)];
  }

  function renderPage(page) {
    container.innerHTML = '';
    const start = (page - 1) * pageSize;
    const end = Math.min(start + pageSize, totalResults);
    const pageCards = sortedCards.slice(start, end);
    pageCards.forEach(card => container.appendChild(card));
    
    renderPaginationControls();
    if (resultsCountSpan) {
      if (sortedCards.length === 0) {
        resultsCountSpan.textContent = `0 of ${totalResults} results`;
      } else {
        resultsCountSpan.textContent = `${start + 1}-${end} of ${totalResults} results`;
      }
    }
  }

  function renderPaginationControls() {
    const totalPages = Math.ceil(sortedCards.length / pageSize);
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, startPage + 4);
    if (endPage - startPage < 4) {
      startPage = Math.max(1, endPage - 4);
    }

    let html = `
      <br/><nav class="vf-pagination" aria-label="Pagination">
        <ul class="vf-pagination__list | vf-list vf-list--inline">
          <li class="vf-pagination__item vf-pagination__item--previous-page">
            ${currentPage > 1 
              ? `<a href="#" aria-label="Previous page" data-page="${currentPage - 1}">Previous</a>`
              : `<span>Previous</span>`}
          </li>
    `;

    for (let i = startPage; i <= endPage; i++) {
      if (i === currentPage) {
        html += `
          <li class="vf-pagination__item vf-pagination__item--is-active">
            <span>${i}</span>
          </li>
        `;
      } else {
        html += `
          <li class="vf-pagination__item">
            <a href="#" data-page="${i}">${i}</a>
          </li>
        `;
      }
    }

    html += `
          <li class="vf-pagination__item vf-pagination__item--next-page">
            ${currentPage < totalPages
              ? `<a href="#" aria-label="Next page" data-page="${currentPage + 1}">Next</a>`
              : `<span>Next</span>`}
          </li>
        </ul>
      </nav>
    `;

    let paginationContainer = document.getElementById('pagination-controls');
    if (!paginationContainer) {
      paginationContainer = document.createElement('div');
      paginationContainer.id = 'pagination-controls';
      container.parentNode.insertBefore(paginationContainer, container.nextSibling);
    }
    paginationContainer.innerHTML = html;
    paginationContainer.querySelectorAll('a[data-page]').forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        currentPage = parseInt(link.getAttribute('data-page'), 10);
        renderPage(currentPage);
      });
    });
  }
  sortSelect.addEventListener('change', (event) => {
    const sortBy = event.target.value;

    if (sortBy === 'az' || sortBy === 'za') {
      sortedCards.sort((a, b) => {
        const aId = a.dataset.message.split(";")[0];
        const bId = b.dataset.message.split(";")[0];

        const [aPrefix, aNum] = parseAccession(aId);
        const [bPrefix, bNum] = parseAccession(bId);

        const prefixCompare = aPrefix.localeCompare(bPrefix);
        if (prefixCompare !== 0) return sortBy === 'az' ? prefixCompare : -prefixCompare;

        return sortBy === 'az' ? aNum - bNum : bNum - aNum;
      });
    } else {
      // Default: revert to original order
      sortedCards = [...originalCards];
    }

    currentPage = 1; // Reset to first page after sorting
    renderPage(currentPage);
  });
  renderPage(currentPage);
</script>