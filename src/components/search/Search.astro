---
import StudyCard from '../../components/cards/BrowseStudyCard.astro';
import SearchFacet from './SearchFacet.astro';
import SearchSelectedFacet from './SearchSelectedFacet.astro';
import PaginationControl from '../PaginationControl.astro';
import  "../../styles/toggle.css"
import "../../styles/browse_controls.css"
import "../../styles/filter_cards.css"
import { PUBLIC_SEARCH_API } from 'astro:env/client';

interface source {
  accession_id: string;
  release_date: string;
  [key: string]: any; // allows any extra properties
}

interface hit {
  _source: source;
  [key: string]: any;
}

export interface SearchHits{
  total: {
    value: number;
    relation: string; 
  };
  max_score: number | null;
  hits: hit; 
}

interface Facet {
  key: string;
  key_as_string?: string;
  doc_count: number;
}

export interface FacetData {
  buckets: Facet[];
  doc_count_error_upper_bound: number;
  sum_other_doc_count: number;
}

export interface PaginationData {
  page: number;
  page_size: number;
  total_pages: number;
}

const { query, hits, facetData, paginationData, organism, imagingMethod, releaseYear, sortBy, sortOrder } =
  Astro.props as {
    query: string;
    hits: SearchHits;
    facetData: FacetData;
    paginationData: PaginationData;
    organism: string;
    imagingMethod: string;
    releaseYear: string;
    sortBy: string;
    sortOrder: string;
  };

export function generateParamString(url: string, query: string, organism: string[], imagingMethod: string[], releaseYear: string[], page: number){
  const pageSize = 9;
  
  if (url.includes(PUBLIC_SEARCH_API)){
    url += `?pagination.page_size=${pageSize}`;
    url += `&query=${encodeURIComponent(query)}`;
  }else{
    url += `?query=${encodeURIComponent(query)}`;
  }
  url = addSelectedFacetToSearchURL(organism, "facet.organism" , url);
  url = addSelectedFacetToSearchURL(imagingMethod, "facet.imaging_method", url); 
  url = addSelectedFacetToSearchURL(releaseYear, "facet.year", url);
  url += `&pagination.page=${page}`;
  return url
}

export function addSelectedFacetToSearchURL(selectedList, facet, url){
    return selectedList && selectedList.length > 0 ? url+"&"+new URLSearchParams(selectedList.map(select => {return `&${facet}=${encodeURIComponent(select)}`}).join("&")).toString(): url;
}

const totalResults = hits.total.value;
let results;

// Sorting on Server side till the API can sort results.

function parseAccession(id) {
    const match = id.match(/^([A-Z\-]+)(\d+)$/i);
    if (!match) return [id, 0];
    return [match[1], parseInt(match[2], 10)];
  }

function sortAcession(aId, bId, sortOrder){
  const [aPrefix, aNum] = parseAccession(aId);
      const [bPrefix, bNum] = parseAccession(bId);
      const prefixCompare = aPrefix.localeCompare(bPrefix);
      if (prefixCompare !== 0) return sortOrder === 'descending' ? -prefixCompare : prefixCompare;
      return sortOrder === 'descending' ? bNum - aNum : aNum - bNum;
}

function sortReleaseDate(aReleaseDate, bReleaseDate, sortOrder){
  const aTime = new Date(aReleaseDate).getTime();
  const bTime = new Date(bReleaseDate).getTime();
  return sortOrder === 'descending' ? bTime - aTime : aTime - bTime
}

switch(sortBy) {
  case "relevance":
    results = sortOrder === "descending"? hits.hits.reverse() : hits.hits;
    break;
  case "accession":
    results = hits.hits.sort((a, b) => {return sortAcession(a?._source?.accession_id, b?._source?.accession_id, sortOrder)});
    break;
  case "release_date":
    results = hits.hits.sort(function(a,b){ return sortReleaseDate(a?._source?.release_date, b?._source?.release_date, sortOrder)});
    break;
  default:
    results = hits.hits;
    break;
}

const studiesURL = "/bioimage-archive/studies"
const facets = Object.entries(facetData).reduce((acc, [facet, data]) => {
  let selectedValue, title, facet_search_id;

const valuesAndCounts = Object.values(data?.buckets as Facet)
  .sort((a, b) => {
    const aKey = a?.key_as_string || a?.key;
    const bKey = b?.key_as_string || b?.key;
    return aKey.toString().toLowerCase().localeCompare(bKey.toString().toLowerCase());
  })
  .reduce((obj, val) => {
    const key = val?.key_as_string || val?.key;
    obj[key] = val.doc_count;
    return obj;
  }, {} as Record<string, number>);

  switch (facet) {
    case "scientific_name":
      selectedValue = organism;
      title = "Organism";
      facet_search_id = "organism";
      break;
    case "imaging_method":
      selectedValue = imagingMethod;
      title = "Imaging Method";
      facet_search_id = "imaging_method";
      break;
    case "release_date":
      selectedValue = releaseYear;
      title = "Release Year";
      facet_search_id = "year";
      break;
    default:
      return acc;
  }
  const totalFacetCounts = Object.values(valuesAndCounts).length + (data?.sum_other_doc_count || 0)
  acc[`facet.${facet_search_id}`] = {
    valuesAndCounts,
    selectedValue,
    totalFacetCounts,
    title
  };

  return acc;
}, {});
---
<section class="vf-content | vf-u-grid-example | vf-grid vf-grid__col-5">
  <div class=".vf-u-grid__col--span-3--sm vf-u-grid__col--span-1--lg vf-u-grid__col--span-1--xl">
    <br />
    <div style="display: flex;">        
      <div style="padding-top: 0.4em">
      <svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" viewBox="0 0 16 16">
        <rect width="16" height="16" fill="none" />
        <path fill="currentColor" d="M6 4a1 1 0 1 1-2 0a1 1 0 0 1 2 0M2 4a3 3 0 0 1 3-3h6a3 3 0 1 1 0 6H5a3 3 
          0 0 1-3-3m3-2a2 2 0 1 0 0 4h6a2 2 0 1 0 0-4zm6 10a1 1 0 1 0 0-2a1 1 0 0 0 0 2m-9-1a3 3 0 0 1 3-3h6a3 
          3 0 1 1 0 6H5a3 3 0 0 1-3-3m3-2a2 2 0 1 0 0 4h6a2 2 0 1 0 0-4z" />
        </svg> 
      </div>
      <div><h3> Filter by</h3></div>
    </div>
    <div>
      <form id="facets" method="GET" action="/bioimage-archive/studies" class="vf-form">
        {Object.entries(facets).map(([id, facet], i) => <>
        <SearchFacet facet={facet} id={id} />
        </>
        )}
        <input type="hidden" name="query" value={query}  />
        {sortBy && (<input type="hidden" name="sortBy" value={sortBy}  />)}
        {sortOrder && (<input type="hidden" name="sortOrder" value={sortOrder} />)}
        
      </form>
    </div>
  </div>
  <div class="vf-u-grid__col--span-1--sm  vf-u-grid__col--span-2--md vf-u-grid__col--span-4--lg vf-u-grid__col--span-4--xl" style="min-width:50%">
    { (query || query === "") && (
      <>
        <section class="vf-content">
          <div class="vf-grid vf-grid__col-3">
            <div class="vf-grid__col--span-2">{query && (<h2>Search results for <a href={`/bioimage-archive/studies?query=${query}`}><strong>{query}</strong></a></h2>)}</div>
            <div></div>
          </div>
          <section>
          <div class="vf-grid vf-grid__col-3">
            <div class="vf-grid__col--span-2" style="display: flex; align-items: center;">
              <span id="paginated-results">
                  {(paginationData.page - 1) * paginationData.page_size + 1} - {Math.min(paginationData.page * paginationData.page_size, totalResults)} of {totalResults} results
                </span>
              </div>
            <div class="vf-form vf-grid__col--span-1" style="display: flex; align-items: center;" id="sort">
            <label for="sortBy" class="vf-form__label vf-u-type__text-body--3 vf-u-padding--0" style="flex: 2; margin:auto;">Sort by:</label>
            <select name="sortBy" id="sortBy" class="vf-form__select vf-u-type__text-body--5 vf-u-padding--100 vf-u-padding__left--200" style="flex: 5; height: 2.5em">
              <option value="relevance" selected={sortBy === "relevance"} >Relevance</option>
              <option value="accession" selected={sortBy === "accession"} >Accession ID</option>
              <option value="release_date" selected={sortBy === "release_date"}>Release Date</option>
            </select>
            <div class="sort-order-buttons" style="flex: 1">
              <button type="button" data-order="ascending" class={sortOrder === "ascending" || !sortOrder ? "active vf-form__select": "vf-form__select"} >⋀</button>
              <button type="button" data-order="descending" class={sortOrder === "descending" ? "active vf-form__select": "vf-form__select"}>⋁</button>
            </div>
            </div>
          </div>
          <div id="selected-facets" style="margin-top: 0.5rem; align-items: center;">
            <SearchSelectedFacet selectedList={organism} url={studiesURL} text={"Organism"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear} /> 
            <SearchSelectedFacet selectedList={imagingMethod} url={studiesURL} text={"Imaging Method"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear} /> 
            <SearchSelectedFacet selectedList={releaseYear} url={studiesURL} text={"Release Year"} query={query} organism={organism} imagingMethod={imagingMethod} releaseYear={releaseYear}/>           
          </div>
          <div class="vf-card-container | vf-card-container__col-4 | vf-u-fullbleed"  style="--vf-card__image--aspect-ratio: 16 / 9;">
            <div class="vf-card-container__inner">
            {results.length === 0 ? (
              <p>No results found.</p>
            ) : (
              results.map((item) => (
                <StudyCard
                study={item._source} studyPageRoot="study"
                />
              ))
            )}
            </div>
            <br/>
            <PaginationControl  paginationData={paginationData}/>
          </div>
          </section>
        </section>
      </>
    )}
  </div>
</section>
<script type="module">
  window.addEventListener('pageshow', (event) => {
    if (event.persisted || performance.getEntriesByType('navigation')[0]?.type === 'back_forward') {
      // Reload the page to reset all state
      window.location.reload();
    }
  });
  const sortSelect = document.getElementById('sortBy');
  sortSelect.addEventListener('change', (event) => {
    const sortBy = event.target.value;
    const url = new URL(window.location.href);
    url.searchParams.set('sortBy', sortBy);
    window.location.href = url.toString();
  });

  document.querySelectorAll('.sort-order-buttons button').forEach(btn => {
  btn.addEventListener('click', () => {
    document.querySelectorAll('.sort-order-buttons button').forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    const sortOrder = btn.dataset.order;
    const url = new URL(window.location.href);
    url.searchParams.set('sortOrder', sortOrder);
    window.location.href = url.toString();
  });
});
</script>
<style>
#sort {
  position: relative;
}
  
#sort select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background: white;
}

#sort::after {
  content: "⋁"; /* your symbol here */
  position: absolute;
  right: 5rem;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none; /* don’t block clicks */
  font-size: 1.25rem;
  color: #555;
}

.sort-order-buttons {
  margin-left: 0.5em;
  display: inline-flex;
  background: white;
  height: 2.2em;
}

.sort-order-buttons button {
  background: white;
  display: block;
  padding: 0 0.5rem;
}

.sort-order-buttons button:hover {
  background: #e2e2e2;
}

.sort-order-buttons button.active {
  background: #3b6fb6;
  color: white;
  border-color: #3b6fb6;
}
</style>